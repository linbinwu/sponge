!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AckReceived	tests/sender_harness.hh	/^    AckReceived(WrappingInt32 ackno) : _ackno(ackno) {}$/;"	f	struct:AckReceived
AckReceived	tests/sender_harness.hh	/^struct AckReceived : public SenderAction {$/;"	s
Address	libsponge/util/address.cc	/^Address::Address(const sockaddr *addr, const size_t size) : _size(size) {$/;"	f	class:Address
Address	libsponge/util/address.cc	/^Address::Address(const string &hostname, const string &service)$/;"	f	class:Address
Address	libsponge/util/address.cc	/^Address::Address(const string &ip, const uint16_t port)$/;"	f	class:Address
Address	libsponge/util/address.cc	/^Address::Address(const string &node, const string &service, const addrinfo &hints) : _size() {$/;"	f	class:Address
Address	libsponge/util/address.hh	/^class Address {$/;"	c
AtEof	tests/fsm_stream_reassembler_harness.hh	/^    AtEof() {}$/;"	f	struct:AtEof
AtEof	tests/fsm_stream_reassembler_harness.hh	/^struct AtEof : public ReassemblerExpectation {$/;"	s
BadChecksum	libsponge/util/parser.hh	/^    BadChecksum,      \/\/!< Bad checksum$/;"	m	class:ParseResult
Buffer	libsponge/util/buffer.hh	/^class Buffer {$/;"	c
BufferEmpty	tests/byte_stream_test_harness.cc	/^BufferEmpty::BufferEmpty(const bool buffer_empty) : _buffer_empty(buffer_empty) {}$/;"	f	class:BufferEmpty
BufferEmpty	tests/byte_stream_test_harness.hh	/^struct BufferEmpty : public ByteStreamExpectation {$/;"	s
BufferList	libsponge/util/buffer.hh	/^    BufferList(Buffer buffer) : _buffers{buffer} {}$/;"	f	class:BufferList
BufferList	libsponge/util/buffer.hh	/^class BufferList {$/;"	c
BufferSize	tests/byte_stream_test_harness.cc	/^BufferSize::BufferSize(const size_t buffer_size) : _buffer_size(buffer_size) {}$/;"	f	class:BufferSize
BufferSize	tests/byte_stream_test_harness.hh	/^struct BufferSize : public ByteStreamExpectation {$/;"	s
BufferViewList	libsponge/util/buffer.cc	/^BufferViewList::BufferViewList(const BufferList &buffers) {$/;"	f	class:BufferViewList
BufferViewList	libsponge/util/buffer.hh	/^    BufferViewList(const char *s) : BufferViewList(std::string_view(s)) {}$/;"	f	class:BufferViewList
BufferViewList	libsponge/util/buffer.hh	/^    BufferViewList(const std::string &str) : BufferViewList(std::string_view(str)) {}$/;"	f	class:BufferViewList
BufferViewList	libsponge/util/buffer.hh	/^    BufferViewList(std::string_view str) { _views.push_back({const_cast<char *>(str.data()), str.size()}); }$/;"	f	class:BufferViewList
BufferViewList	libsponge/util/buffer.hh	/^class BufferViewList {$/;"	c
ByteStream	libsponge/byte_stream.cc	/^ByteStream::ByteStream(const size_t capacity) {$/;"	f	class:ByteStream
ByteStream	libsponge/byte_stream.hh	/^class ByteStream {$/;"	c
ByteStreamAction	tests/byte_stream_test_harness.hh	/^struct ByteStreamAction : public ByteStreamTestStep {$/;"	s
ByteStreamExpectation	tests/byte_stream_test_harness.hh	/^struct ByteStreamExpectation : public ByteStreamTestStep {$/;"	s
ByteStreamExpectationViolation	tests/byte_stream_test_harness.cc	/^ByteStreamExpectationViolation::ByteStreamExpectationViolation(const std::string &msg) : std::runtime_error(msg) {}$/;"	f	class:ByteStreamExpectationViolation
ByteStreamExpectationViolation	tests/byte_stream_test_harness.hh	/^class ByteStreamExpectationViolation : public std::runtime_error {$/;"	c
ByteStreamTestHarness	tests/byte_stream_test_harness.cc	/^ByteStreamTestHarness::ByteStreamTestHarness(const std::string &test_name, const size_t capacity)$/;"	f	class:ByteStreamTestHarness
ByteStreamTestHarness	tests/byte_stream_test_harness.hh	/^class ByteStreamTestHarness {$/;"	c
ByteStreamTestStep	tests/byte_stream_test_harness.hh	/^struct ByteStreamTestStep {$/;"	s
BytesAssembled	tests/fsm_stream_reassembler_harness.hh	/^    BytesAssembled(size_t bytes) : _bytes(bytes) {}$/;"	f	struct:BytesAssembled
BytesAssembled	tests/fsm_stream_reassembler_harness.hh	/^struct BytesAssembled : public ReassemblerExpectation {$/;"	s
BytesAvailable	tests/fsm_stream_reassembler_harness.hh	/^    BytesAvailable(std::string &&bytes) : _bytes(std::move(bytes)) {}$/;"	f	struct:BytesAvailable
BytesAvailable	tests/fsm_stream_reassembler_harness.hh	/^struct BytesAvailable : public ReassemblerExpectation {$/;"	s
BytesRead	tests/byte_stream_test_harness.cc	/^BytesRead::BytesRead(const size_t bytes_read) : _bytes_read(bytes_read) {}$/;"	f	class:BytesRead
BytesRead	tests/byte_stream_test_harness.hh	/^struct BytesRead : public ByteStreamExpectation {$/;"	s
BytesWritten	tests/byte_stream_test_harness.cc	/^BytesWritten::BytesWritten(const size_t bytes_written) : _bytes_written(bytes_written) {}$/;"	f	class:BytesWritten
BytesWritten	tests/byte_stream_test_harness.hh	/^struct BytesWritten : public ByteStreamExpectation {$/;"	s
CLONEDEV	libsponge/util/tun.cc	/^static constexpr const char *CLONEDEV = "\/dev\/net\/tun";$/;"	v	file:
Close	tests/sender_harness.hh	/^    Close() {}$/;"	f	struct:Close
Close	tests/sender_harness.hh	/^struct Close : public SenderAction {$/;"	s
Close	tests/tcp_expectation.hh	/^struct Close : public TCPAction {$/;"	s
Connect	tests/tcp_expectation.hh	/^struct Connect : public TCPAction {$/;"	s
DEFAULT_TEST_WINDOW	tests/sender_harness.hh	/^const unsigned int DEFAULT_TEST_WINDOW = 137;$/;"	v
DEFAULT_TEST_WINDOW	tests/tcp_fsm_test_harness.cc	/^const unsigned int DEFAULT_TEST_WINDOW = 137;$/;"	v
DUMMY_CODE	libsponge/byte_stream.cc	/^void DUMMY_CODE(Targs &&... \/* unused *\/) {}$/;"	f
DUMMY_CODE	libsponge/stream_reassembler.cc	/^void DUMMY_CODE(Targs &&... \/* unused *\/) {}$/;"	f
Direction	libsponge/util/eventloop.hh	/^    enum class Direction : short {$/;"	c	class:EventLoop
EndInput	tests/byte_stream_test_harness.hh	/^struct EndInput : public ByteStreamAction {$/;"	s
Eof	tests/byte_stream_test_harness.cc	/^Eof::Eof(const bool eof) : _eof(eof) {}$/;"	f	class:Eof
Eof	tests/byte_stream_test_harness.hh	/^struct Eof : public ByteStreamExpectation {$/;"	s
EventLoop	libsponge/util/eventloop.hh	/^class EventLoop {$/;"	c
ExpectAckno	tests/receiver_harness.hh	/^    ExpectAckno(std::optional<WrappingInt32> ackno) : _ackno(ackno) {}$/;"	f	struct:ExpectAckno
ExpectAckno	tests/receiver_harness.hh	/^struct ExpectAckno : public ReceiverExpectation {$/;"	s
ExpectBytes	tests/receiver_harness.hh	/^    ExpectBytes(std::string &&bytes) : _bytes(std::move(bytes)) {}$/;"	f	struct:ExpectBytes
ExpectBytes	tests/receiver_harness.hh	/^struct ExpectBytes : public ReceiverExpectation {$/;"	s
ExpectBytesInFlight	tests/sender_harness.hh	/^    ExpectBytesInFlight(size_t n_bytes) : _n_bytes(n_bytes) {}$/;"	f	struct:ExpectBytesInFlight
ExpectBytesInFlight	tests/sender_harness.hh	/^struct ExpectBytesInFlight : public SenderExpectation {$/;"	s
ExpectBytesInFlight	tests/tcp_expectation.hh	/^    ExpectBytesInFlight(uint64_t bytes_) : bytes(bytes_) {}$/;"	f	struct:ExpectBytesInFlight
ExpectBytesInFlight	tests/tcp_expectation.hh	/^struct ExpectBytesInFlight : public TCPExpectation {$/;"	s
ExpectData	tests/tcp_expectation.hh	/^    ExpectData() {}$/;"	f	struct:ExpectData
ExpectData	tests/tcp_expectation.hh	/^struct ExpectData : public TCPExpectation {$/;"	s
ExpectEof	tests/receiver_harness.hh	/^    ExpectEof() {}$/;"	f	struct:ExpectEof
ExpectEof	tests/receiver_harness.hh	/^struct ExpectEof : public ReceiverExpectation {$/;"	s
ExpectFrame	tests/network_interface_test_harness.hh	/^    ExpectFrame(EthernetFrame e) : expected(e) {}$/;"	f	struct:ExpectFrame
ExpectFrame	tests/network_interface_test_harness.hh	/^struct ExpectFrame : public NetworkInterfaceExpectation {$/;"	s
ExpectInputNotEnded	tests/receiver_harness.hh	/^    ExpectInputNotEnded() {}$/;"	f	struct:ExpectInputNotEnded
ExpectInputNotEnded	tests/receiver_harness.hh	/^struct ExpectInputNotEnded : public ReceiverExpectation {$/;"	s
ExpectLingerTimer	tests/tcp_expectation.hh	/^    ExpectLingerTimer(uint64_t ms_) : ms(ms_) {}$/;"	f	struct:ExpectLingerTimer
ExpectLingerTimer	tests/tcp_expectation.hh	/^struct ExpectLingerTimer : public TCPExpectation {$/;"	s
ExpectNoData	tests/tcp_expectation.hh	/^struct ExpectNoData : public TCPExpectation {$/;"	s
ExpectNoFrame	tests/network_interface_test_harness.hh	/^struct ExpectNoFrame : public NetworkInterfaceExpectation {$/;"	s
ExpectNoSegment	tests/sender_harness.hh	/^    ExpectNoSegment() {}$/;"	f	struct:ExpectNoSegment
ExpectNoSegment	tests/sender_harness.hh	/^struct ExpectNoSegment : public SenderExpectation {$/;"	s
ExpectNoSegment	tests/tcp_expectation.hh	/^struct ExpectNoSegment : public TCPExpectation {$/;"	s
ExpectNotInState	tests/tcp_expectation.hh	/^    ExpectNotInState(TCPState stat) : state(stat) {}$/;"	f	struct:ExpectNotInState
ExpectNotInState	tests/tcp_expectation.hh	/^struct ExpectNotInState : public TCPExpectation {$/;"	s
ExpectOneSegment	tests/tcp_expectation.hh	/^struct ExpectOneSegment : public ExpectSegment {$/;"	s
ExpectSegment	tests/sender_harness.hh	/^struct ExpectSegment : public SenderExpectation {$/;"	s
ExpectSegment	tests/tcp_expectation.hh	/^struct ExpectSegment : public TCPExpectation {$/;"	s
ExpectSegmentAvailable	tests/tcp_expectation.hh	/^    ExpectSegmentAvailable() {}$/;"	f	struct:ExpectSegmentAvailable
ExpectSegmentAvailable	tests/tcp_expectation.hh	/^struct ExpectSegmentAvailable : public TCPExpectation {$/;"	s
ExpectSeqno	tests/sender_harness.hh	/^    ExpectSeqno(WrappingInt32 seqno) : _seqno(seqno) {}$/;"	f	struct:ExpectSeqno
ExpectSeqno	tests/sender_harness.hh	/^struct ExpectSeqno : public SenderExpectation {$/;"	s
ExpectState	tests/receiver_harness.hh	/^    ExpectState(const std::string &state) : _state(state) {}$/;"	f	struct:ExpectState
ExpectState	tests/receiver_harness.hh	/^struct ExpectState : public ReceiverExpectation {$/;"	s
ExpectState	tests/sender_harness.hh	/^    ExpectState(const std::string &state) : _state(state) {}$/;"	f	struct:ExpectState
ExpectState	tests/sender_harness.hh	/^struct ExpectState : public SenderExpectation {$/;"	s
ExpectState	tests/tcp_expectation.hh	/^    ExpectState(TCPState stat) : state(stat) {}$/;"	f	struct:ExpectState
ExpectState	tests/tcp_expectation.hh	/^struct ExpectState : public TCPExpectation {$/;"	s
ExpectTotalAssembledBytes	tests/receiver_harness.hh	/^    ExpectTotalAssembledBytes(size_t n_bytes) : _n_bytes(n_bytes) {}$/;"	f	struct:ExpectTotalAssembledBytes
ExpectTotalAssembledBytes	tests/receiver_harness.hh	/^struct ExpectTotalAssembledBytes : public ReceiverExpectation {$/;"	s
ExpectUnassembledBytes	tests/receiver_harness.hh	/^    ExpectUnassembledBytes(size_t n_bytes) : _n_bytes(n_bytes) {}$/;"	f	struct:ExpectUnassembledBytes
ExpectUnassembledBytes	tests/receiver_harness.hh	/^struct ExpectUnassembledBytes : public ReceiverExpectation {$/;"	s
ExpectUnassembledBytes	tests/tcp_expectation.hh	/^    ExpectUnassembledBytes(uint64_t bytes_) : bytes(bytes_) {}$/;"	f	struct:ExpectUnassembledBytes
ExpectUnassembledBytes	tests/tcp_expectation.hh	/^struct ExpectUnassembledBytes : public TCPExpectation {$/;"	s
ExpectWindow	tests/receiver_harness.hh	/^    ExpectWindow(const size_t window) : _window(window) {}$/;"	f	struct:ExpectWindow
ExpectWindow	tests/receiver_harness.hh	/^struct ExpectWindow : public ReceiverExpectation {$/;"	s
FDWrapper	libsponge/util/file_descriptor.cc	/^FileDescriptor::FDWrapper::FDWrapper(const int fd) : _fd(fd) {$/;"	f	class:FileDescriptor::FDWrapper
FDWrapper	libsponge/util/file_descriptor.hh	/^    class FDWrapper {$/;"	c	class:FileDescriptor
FileDescriptor	libsponge/util/file_descriptor.cc	/^FileDescriptor::FileDescriptor(const int fd) : _internal_fd(make_shared<FDWrapper>(fd)) {}$/;"	f	class:FileDescriptor
FileDescriptor	libsponge/util/file_descriptor.cc	/^FileDescriptor::FileDescriptor(shared_ptr<FDWrapper> other_shared_ptr) : _internal_fd(move(other_shared_ptr)) {}$/;"	f	class:FileDescriptor
FileDescriptor	libsponge/util/file_descriptor.hh	/^class FileDescriptor {$/;"	c
HeaderTooShort	libsponge/util/parser.hh	/^    HeaderTooShort,   \/\/!< Header length is shorter than minimum required$/;"	m	class:ParseResult
In	libsponge/util/eventloop.hh	/^        In = POLLIN,   \/\/!< Callback will be triggered when Rule::fd is readable.$/;"	m	class:EventLoop::Direction
InputEnded	tests/byte_stream_test_harness.cc	/^InputEnded::InputEnded(const bool input_ended) : _input_ended(input_ended) {}$/;"	f	class:InputEnded
InputEnded	tests/byte_stream_test_harness.hh	/^struct InputEnded : public ByteStreamExpectation {$/;"	s
InternetChecksum	libsponge/util/util.cc	/^InternetChecksum::InternetChecksum(const uint32_t initial_sum) : _sum(initial_sum) {}$/;"	f	class:InternetChecksum
InternetChecksum	libsponge/util/util.hh	/^class InternetChecksum {$/;"	c
Listen	tests/tcp_expectation.hh	/^struct Listen : public TCPAction {$/;"	s
LocalStreamSocket	libsponge/util/socket.hh	/^    explicit LocalStreamSocket(FileDescriptor &&fd) : Socket(std::move(fd), AF_UNIX, SOCK_STREAM) {}$/;"	f	class:LocalStreamSocket
LocalStreamSocket	libsponge/util/socket.hh	/^class LocalStreamSocket : public Socket {$/;"	c
MAX_RECV	tests/tcp_fsm_test_harness.hh	/^    static constexpr size_t MAX_RECV = TCPConfig::MAX_PAYLOAD_SIZE + TCPHeader::LENGTH + 16;$/;"	m	class:TestFD
MAX_SEG_LEN	tests/fsm_stream_reassembler_many.cc	/^static constexpr unsigned MAX_SEG_LEN = 2048;$/;"	v	file:
MAX_SEG_LEN	tests/fsm_stream_reassembler_win.cc	/^static constexpr unsigned MAX_SEG_LEN = 2048;$/;"	v	file:
MAX_SWIN	tests/fsm_winsize.cc	/^static constexpr unsigned MAX_SWIN = 34816;$/;"	v	file:
MAX_SWIN_MUL	tests/fsm_winsize.cc	/^static constexpr unsigned MAX_SWIN_MUL = 6;$/;"	v	file:
MIN_SWIN	tests/fsm_winsize.cc	/^static constexpr unsigned MIN_SWIN = 2048;$/;"	v	file:
MIN_SWIN_MUL	tests/fsm_winsize.cc	/^static constexpr unsigned MIN_SWIN_MUL = 2;$/;"	v	file:
NOT_SYN	tests/receiver_harness.hh	/^    enum class Result { NOT_SYN, OK };$/;"	m	class:SegmentArrives::Result
NREPS	tests/fsm_loopback.cc	/^static constexpr unsigned NREPS = 64;$/;"	v	file:
NREPS	tests/fsm_loopback_win.cc	/^static constexpr unsigned NREPS = 32;$/;"	v	file:
NREPS	tests/fsm_reorder.cc	/^static constexpr unsigned NREPS = 32;$/;"	v	file:
NREPS	tests/fsm_stream_reassembler_many.cc	/^static constexpr unsigned NREPS = 32;$/;"	v	file:
NREPS	tests/fsm_stream_reassembler_win.cc	/^static constexpr unsigned NREPS = 32;$/;"	v	file:
NREPS	tests/fsm_winsize.cc	/^static constexpr unsigned NREPS = 32;$/;"	v	file:
NREPS	tests/ipv4_parser.cc	/^constexpr unsigned NREPS = 32;$/;"	v
NREPS	tests/tcp_parser.cc	/^constexpr unsigned NREPS = 32;$/;"	v
NSEGS	tests/fsm_stream_reassembler_many.cc	/^static constexpr unsigned NSEGS = 128;$/;"	v	file:
NSEGS	tests/fsm_stream_reassembler_win.cc	/^static constexpr unsigned NSEGS = 128;$/;"	v	file:
NetParser	libsponge/util/parser.hh	/^    NetParser(Buffer buffer) : _buffer(buffer) {}$/;"	f	class:NetParser
NetParser	libsponge/util/parser.hh	/^class NetParser {$/;"	c
NetUnparser	libsponge/util/parser.hh	/^struct NetUnparser {$/;"	s
NetworkInterfaceAction	tests/network_interface_test_harness.hh	/^struct NetworkInterfaceAction : public NetworkInterfaceTestStep {$/;"	s
NetworkInterfaceExpectation	tests/network_interface_test_harness.hh	/^struct NetworkInterfaceExpectation : public NetworkInterfaceTestStep {$/;"	s
NetworkInterfaceExpectationViolation	tests/network_interface_test_harness.cc	/^NetworkInterfaceExpectationViolation::NetworkInterfaceExpectationViolation(const std::string &msg)$/;"	f	class:NetworkInterfaceExpectationViolation
NetworkInterfaceExpectationViolation	tests/network_interface_test_harness.hh	/^class NetworkInterfaceExpectationViolation : public std::runtime_error {$/;"	c
NetworkInterfaceTestHarness	tests/network_interface_test_harness.cc	/^NetworkInterfaceTestHarness::NetworkInterfaceTestHarness(const std::string &test_name,$/;"	f	class:NetworkInterfaceTestHarness
NetworkInterfaceTestHarness	tests/network_interface_test_harness.hh	/^class NetworkInterfaceTestHarness {$/;"	c
NetworkInterfaceTestStep	tests/network_interface_test_harness.hh	/^struct NetworkInterfaceTestStep {$/;"	s
NoError	libsponge/util/parser.hh	/^    NoError = 0,      \/\/!< Success$/;"	m	class:ParseResult
NotAtEof	tests/fsm_stream_reassembler_harness.hh	/^    NotAtEof() {}$/;"	f	struct:NotAtEof
NotAtEof	tests/fsm_stream_reassembler_harness.hh	/^struct NotAtEof : public ReassemblerExpectation {$/;"	s
Out	libsponge/util/eventloop.hh	/^        Out = POLLOUT  \/\/!< Callback will be triggered when Rule::fd is writable.$/;"	m	class:EventLoop::Direction
PacketTooShort	libsponge/util/parser.hh	/^    PacketTooShort,   \/\/!< Not enough data to finish parsing$/;"	m	class:ParseResult
ParseResult	libsponge/util/parser.hh	/^enum class ParseResult {$/;"	c
Peek	tests/byte_stream_test_harness.cc	/^Peek::Peek(const std::string &output) : _output(output) {}$/;"	f	class:Peek
Peek	tests/byte_stream_test_harness.hh	/^struct Peek : public ByteStreamExpectation {$/;"	s
Pop	tests/byte_stream_test_harness.cc	/^Pop::Pop(const size_t len) : _len(len) {}$/;"	f	class:Pop
Pop	tests/byte_stream_test_harness.hh	/^struct Pop : public ByteStreamAction {$/;"	s
Raw	libsponge/util/address.hh	/^    class Raw {$/;"	c	class:Address
ReassemblerAction	tests/fsm_stream_reassembler_harness.hh	/^struct ReassemblerAction : public ReassemblerTestStep {$/;"	s
ReassemblerExpectation	tests/fsm_stream_reassembler_harness.hh	/^struct ReassemblerExpectation : public ReassemblerTestStep {$/;"	s
ReassemblerExpectationViolation	tests/fsm_stream_reassembler_harness.hh	/^    ReassemblerExpectationViolation(const std::string msg) : std::runtime_error(msg) {}$/;"	f	class:ReassemblerExpectationViolation
ReassemblerExpectationViolation	tests/fsm_stream_reassembler_harness.hh	/^class ReassemblerExpectationViolation : public std::runtime_error {$/;"	c
ReassemblerTestHarness	tests/fsm_stream_reassembler_harness.hh	/^    ReassemblerTestHarness(const size_t capacity) : reassembler(capacity), steps_executed() {$/;"	f	class:ReassemblerTestHarness
ReassemblerTestHarness	tests/fsm_stream_reassembler_harness.hh	/^class ReassemblerTestHarness {$/;"	c
ReassemblerTestStep	tests/fsm_stream_reassembler_harness.hh	/^struct ReassemblerTestStep {$/;"	s
ReceiveFrame	tests/network_interface_test_harness.hh	/^    ReceiveFrame(EthernetFrame f, std::optional<InternetDatagram> e) : frame(f), expected(e) {}$/;"	f	struct:ReceiveFrame
ReceiveFrame	tests/network_interface_test_harness.hh	/^struct ReceiveFrame : public NetworkInterfaceAction {$/;"	s
ReceiverAction	tests/receiver_harness.hh	/^struct ReceiverAction : public ReceiverTestStep {$/;"	s
ReceiverExpectation	tests/receiver_harness.hh	/^struct ReceiverExpectation : public ReceiverTestStep {$/;"	s
ReceiverExpectationViolation	tests/receiver_harness.hh	/^    ReceiverExpectationViolation(const std::string msg) : std::runtime_error(msg) {}$/;"	f	class:ReceiverExpectationViolation
ReceiverExpectationViolation	tests/receiver_harness.hh	/^class ReceiverExpectationViolation : public std::runtime_error {$/;"	c
ReceiverTestStep	tests/receiver_harness.hh	/^struct ReceiverTestStep {$/;"	s
RemainingCapacity	tests/byte_stream_test_harness.cc	/^RemainingCapacity::RemainingCapacity(const size_t remaining_capacity) : _remaining_capacity(remaining_capacity) {}$/;"	f	class:RemainingCapacity
RemainingCapacity	tests/byte_stream_test_harness.hh	/^struct RemainingCapacity : public ByteStreamExpectation {$/;"	s
Result	libsponge/util/eventloop.hh	/^    enum class Result {$/;"	c	class:EventLoop::Direction
Result	tests/receiver_harness.hh	/^    enum class Result { NOT_SYN, OK };$/;"	c	struct:SegmentArrives
Rule	libsponge/util/eventloop.hh	/^    class Rule {$/;"	c	class:EventLoop::Direction
SPONGE_BYTE_STREAM_HARNESS_HH	tests/byte_stream_test_harness.hh	/^#define SPONGE_BYTE_STREAM_HARNESS_HH$/;"	d
SPONGE_FSM_STREAM_REASSEMBLER_HARNESS_HH	tests/fsm_stream_reassembler_harness.hh	/^#define SPONGE_FSM_STREAM_REASSEMBLER_HARNESS_HH$/;"	d
SPONGE_LIBSPONGE_ADDRESS_HH	libsponge/util/address.hh	/^#define SPONGE_LIBSPONGE_ADDRESS_HH$/;"	d
SPONGE_LIBSPONGE_BUFFER_HH	libsponge/util/buffer.hh	/^#define SPONGE_LIBSPONGE_BUFFER_HH$/;"	d
SPONGE_LIBSPONGE_BYTE_STREAM_HH	libsponge/byte_stream.hh	/^#define SPONGE_LIBSPONGE_BYTE_STREAM_HH$/;"	d
SPONGE_LIBSPONGE_EVENTLOOP_HH	libsponge/util/eventloop.hh	/^#define SPONGE_LIBSPONGE_EVENTLOOP_HH$/;"	d
SPONGE_LIBSPONGE_FILE_DESCRIPTOR_HH	libsponge/util/file_descriptor.hh	/^#define SPONGE_LIBSPONGE_FILE_DESCRIPTOR_HH$/;"	d
SPONGE_LIBSPONGE_PARSER_HH	libsponge/util/parser.hh	/^#define SPONGE_LIBSPONGE_PARSER_HH$/;"	d
SPONGE_LIBSPONGE_SEND_EQUIVALENCE_CHECKER_HH	tests/send_equivalence_checker.hh	/^#define SPONGE_LIBSPONGE_SEND_EQUIVALENCE_CHECKER_HH$/;"	d
SPONGE_LIBSPONGE_SOCKET_HH	libsponge/util/socket.hh	/^#define SPONGE_LIBSPONGE_SOCKET_HH$/;"	d
SPONGE_LIBSPONGE_STREAM_REASSEMBLER_HH	libsponge/stream_reassembler.hh	/^#define SPONGE_LIBSPONGE_STREAM_REASSEMBLER_HH$/;"	d
SPONGE_LIBSPONGE_TCP_EXPECTATION_FORWARD_HH	tests/tcp_expectation_forward.hh	/^#define SPONGE_LIBSPONGE_TCP_EXPECTATION_FORWARD_HH$/;"	d
SPONGE_LIBSPONGE_TCP_EXPECTATION_HH	tests/tcp_expectation.hh	/^#define SPONGE_LIBSPONGE_TCP_EXPECTATION_HH$/;"	d
SPONGE_LIBSPONGE_TCP_FSM_TEST_HARNESS_HH	tests/tcp_fsm_test_harness.hh	/^#define SPONGE_LIBSPONGE_TCP_FSM_TEST_HARNESS_HH$/;"	d
SPONGE_LIBSPONGE_TUN_HH	libsponge/util/tun.hh	/^#define SPONGE_LIBSPONGE_TUN_HH$/;"	d
SPONGE_LIBSPONGE_UTIL_HH	libsponge/util/util.hh	/^#define SPONGE_LIBSPONGE_UTIL_HH$/;"	d
SPONGE_NETWORK_INTERFACE_HARNESS_HH	tests/network_interface_test_harness.hh	/^#define SPONGE_NETWORK_INTERFACE_HARNESS_HH$/;"	d
SPONGE_RECEIVER_HARNESS_HH	tests/receiver_harness.hh	/^#define SPONGE_RECEIVER_HARNESS_HH$/;"	d
SPONGE_SENDER_HARNESS_HH	tests/sender_harness.hh	/^#define SPONGE_SENDER_HARNESS_HH$/;"	d
SPONGE_STRING_CONVERSIONS_HH	tests/string_conversions.hh	/^#define SPONGE_STRING_CONVERSIONS_HH$/;"	d
SPONGE_TESTS_FSM_RETX_HH	tests/fsm_retx.hh	/^#define SPONGE_TESTS_FSM_RETX_HH$/;"	d
SPONGE_TESTS_TEST_ERR_IF_HH	tests/test_err_if.hh	/^#define SPONGE_TESTS_TEST_ERR_IF_HH$/;"	d
SPONGE_TESTS_TEST_SHOULD_BE_HH	tests/test_should_be.hh	/^#define SPONGE_TESTS_TEST_SHOULD_BE_HH$/;"	d
SPONGE_TESTS_TEST_UTILS_HH	tests/test_utils.hh	/^#define SPONGE_TESTS_TEST_UTILS_HH$/;"	d
SPONGE_TESTS_TEST_UTILS_IPV4_HH	tests/test_utils_ipv4.hh	/^#define SPONGE_TESTS_TEST_UTILS_IPV4_HH$/;"	d
SegmentArrives	tests/receiver_harness.hh	/^struct SegmentArrives : public ReceiverAction {$/;"	s
SegmentExpectationViolation	tests/sender_harness.hh	/^    SegmentExpectationViolation(const std::string &msg) : SenderExpectationViolation(msg) {}$/;"	f	class:SegmentExpectationViolation
SegmentExpectationViolation	tests/sender_harness.hh	/^class SegmentExpectationViolation : public SenderExpectationViolation {$/;"	c
SegmentExpectationViolation	tests/tcp_expectation_forward.hh	/^    SegmentExpectationViolation(const std::string &msg) : TCPExpectationViolation(msg) {}$/;"	f	class:SegmentExpectationViolation
SegmentExpectationViolation	tests/tcp_expectation_forward.hh	/^class SegmentExpectationViolation : public TCPExpectationViolation {$/;"	c
SendDatagram	tests/network_interface_test_harness.hh	/^    SendDatagram(InternetDatagram d, Address n) : dgram(d), next_hop(n) {}$/;"	f	struct:SendDatagram
SendDatagram	tests/network_interface_test_harness.hh	/^struct SendDatagram : public NetworkInterfaceAction {$/;"	s
SendEquivalenceChecker	tests/send_equivalence_checker.hh	/^class SendEquivalenceChecker {$/;"	c
SendSegment	tests/tcp_expectation.hh	/^    SendSegment() {}$/;"	f	struct:SendSegment
SendSegment	tests/tcp_expectation.hh	/^    SendSegment(TCPSegment seg) {$/;"	f	struct:SendSegment
SendSegment	tests/tcp_expectation.hh	/^struct SendSegment : public TCPAction {$/;"	s
SenderAction	tests/sender_harness.hh	/^struct SenderAction : public SenderTestStep {$/;"	s
SenderExpectation	tests/sender_harness.hh	/^struct SenderExpectation : public SenderTestStep {$/;"	s
SenderExpectationViolation	tests/sender_harness.hh	/^    SenderExpectationViolation(const std::string msg) : std::runtime_error(msg) {}$/;"	f	class:SenderExpectationViolation
SenderExpectationViolation	tests/sender_harness.hh	/^class SenderExpectationViolation : public std::runtime_error {$/;"	c
SenderTestStep	tests/sender_harness.hh	/^struct SenderTestStep {$/;"	s
Socket	libsponge/util/socket.cc	/^Socket::Socket(FileDescriptor &&fd, const int domain, const int type) : FileDescriptor(move(fd)) {$/;"	f	class:Socket
Socket	libsponge/util/socket.cc	/^Socket::Socket(const int domain, const int type) : FileDescriptor(SystemCall("socket", socket(domain, type, 0))) {}$/;"	f	class:Socket
Socket	libsponge/util/socket.hh	/^class Socket : public FileDescriptor {$/;"	c
StateExpectationViolation	tests/tcp_expectation_forward.hh	/^    StateExpectationViolation(const TCPState &expected_state, const TCPState &actual_state)$/;"	f	class:StateExpectationViolation
StateExpectationViolation	tests/tcp_expectation_forward.hh	/^    StateExpectationViolation(const std::string &msg) : TCPExpectationViolation(msg) {}$/;"	f	class:StateExpectationViolation
StateExpectationViolation	tests/tcp_expectation_forward.hh	/^class StateExpectationViolation : public TCPExpectationViolation {$/;"	c
StreamReassembler	libsponge/stream_reassembler.cc	/^StreamReassembler::StreamReassembler(const size_t capacity) : _output(capacity), _capacity(capacity) {}$/;"	f	class:StreamReassembler
StreamReassembler	libsponge/stream_reassembler.hh	/^class StreamReassembler {$/;"	c
SubmitSegment	tests/fsm_stream_reassembler_harness.hh	/^    SubmitSegment(std::string data, size_t index) : _data(data), _index(index) {}$/;"	f	struct:SubmitSegment
SubmitSegment	tests/fsm_stream_reassembler_harness.hh	/^struct SubmitSegment : public ReassemblerAction {$/;"	s
Success	libsponge/util/eventloop.hh	/^        Success,  \/\/!< At least one Rule was triggered.$/;"	m	class:EventLoop::Direction::Result
SystemCall	libsponge/util/util.cc	/^int SystemCall(const char *attempt, const int return_value, const int errno_mask) {$/;"	f
SystemCall	libsponge/util/util.cc	/^int SystemCall(const string &attempt, const int return_value, const int errno_mask) {$/;"	f
TCPAction	tests/tcp_expectation.hh	/^struct TCPAction : public TCPTestStep {$/;"	s
TCPExpectation	tests/tcp_expectation.hh	/^struct TCPExpectation : public TCPTestStep {$/;"	s
TCPExpectationViolation	tests/tcp_expectation_forward.hh	/^    TCPExpectationViolation(const std::string msg) : std::runtime_error(msg) {}$/;"	f	class:TCPExpectationViolation
TCPExpectationViolation	tests/tcp_expectation_forward.hh	/^class TCPExpectationViolation : public std::runtime_error {$/;"	c
TCPPropertyViolation	tests/tcp_expectation_forward.hh	/^    TCPPropertyViolation(const std::string &msg) : TCPExpectationViolation(msg) {}$/;"	f	class:TCPPropertyViolation
TCPPropertyViolation	tests/tcp_expectation_forward.hh	/^class TCPPropertyViolation : public TCPExpectationViolation {$/;"	c
TCPReceiverTestHarness	tests/receiver_harness.hh	/^    TCPReceiverTestHarness(size_t capacity) : receiver(capacity), steps_executed() {$/;"	f	class:TCPReceiverTestHarness
TCPReceiverTestHarness	tests/receiver_harness.hh	/^class TCPReceiverTestHarness {$/;"	c
TCPSenderTestHarness	tests/sender_harness.hh	/^    TCPSenderTestHarness(const std::string &name_, TCPConfig config)$/;"	f	class:TCPSenderTestHarness
TCPSenderTestHarness	tests/sender_harness.hh	/^class TCPSenderTestHarness {$/;"	c
TCPSocket	libsponge/util/socket.hh	/^    TCPSocket() : Socket(AF_INET, SOCK_STREAM) {}$/;"	f	class:TCPSocket
TCPSocket	libsponge/util/socket.hh	/^    explicit TCPSocket(FileDescriptor &&fd) : Socket(std::move(fd), AF_INET, SOCK_STREAM) {}$/;"	f	class:TCPSocket
TCPSocket	libsponge/util/socket.hh	/^class TCPSocket : public Socket {$/;"	c
TCPTestHarness	tests/tcp_fsm_test_harness.hh	/^    explicit TCPTestHarness(const TCPConfig &c_fsm = {}) : _fsm(c_fsm) {}$/;"	f	class:TCPTestHarness
TCPTestHarness	tests/tcp_fsm_test_harness.hh	/^class TCPTestHarness {$/;"	c
TCPTestStep	tests/tcp_expectation_forward.hh	/^struct TCPTestStep {$/;"	s
TapFD	libsponge/util/tun.hh	/^    explicit TapFD(const std::string &devname) : TunTapFD(devname, false) {}$/;"	f	class:TapFD
TapFD	libsponge/util/tun.hh	/^class TapFD : public TunTapFD {$/;"	c
TestFD	tests/tcp_fsm_test_harness.cc	/^TestFD::TestFD()$/;"	f	class:TestFD
TestFD	tests/tcp_fsm_test_harness.cc	/^TestFD::TestFD(pair<FileDescriptor, TestRFD> fd_pair)$/;"	f	class:TestFD
TestFD	tests/tcp_fsm_test_harness.hh	/^class TestFD : public FileDescriptor {$/;"	c
TestFdAdapter	tests/tcp_fsm_test_harness.hh	/^class TestFdAdapter : public FdAdapterBase, public TestFD {$/;"	c
TestRFD	tests/tcp_fsm_test_harness.hh	/^    class TestRFD : public FileDescriptor {$/;"	c	class:TestFD
Tick	tests/network_interface_test_harness.hh	/^    Tick(const size_t ms) : _ms(ms) {}$/;"	f	struct:Tick
Tick	tests/network_interface_test_harness.hh	/^struct Tick : public NetworkInterfaceAction {$/;"	s
Tick	tests/sender_harness.hh	/^    Tick(size_t ms) : _ms(ms) {}$/;"	f	struct:Tick
Tick	tests/sender_harness.hh	/^struct Tick : public SenderAction {$/;"	s
Tick	tests/tcp_expectation.hh	/^    Tick(size_t ms_) : ms_since_last_tick(ms_) {}$/;"	f	struct:Tick
Tick	tests/tcp_expectation.hh	/^struct Tick : public TCPAction {$/;"	s
Timeout	libsponge/util/eventloop.hh	/^        Timeout,  \/\/!< No rules were triggered before timeout.$/;"	m	class:EventLoop::Direction::Result
TruncatedPacket	libsponge/util/parser.hh	/^    TruncatedPacket,  \/\/!< Packet length is shorter than header claims$/;"	m	class:ParseResult
TunFD	libsponge/util/tun.hh	/^    explicit TunFD(const std::string &devname) : TunTapFD(devname, true) {}$/;"	f	class:TunFD
TunFD	libsponge/util/tun.hh	/^class TunFD : public TunTapFD {$/;"	c
TunTapFD	libsponge/util/tun.cc	/^TunTapFD::TunTapFD(const string &devname, const bool is_tun)$/;"	f	class:TunTapFD
TunTapFD	libsponge/util/tun.hh	/^class TunTapFD : public FileDescriptor {$/;"	c
UDPSocket	libsponge/util/socket.hh	/^    UDPSocket() : Socket(AF_INET, SOCK_DGRAM) {}$/;"	f	class:UDPSocket
UDPSocket	libsponge/util/socket.hh	/^    explicit UDPSocket(FileDescriptor &&fd) : Socket(std::move(fd), AF_INET, SOCK_DGRAM) {}$/;"	f	class:UDPSocket
UDPSocket	libsponge/util/socket.hh	/^class UDPSocket : public Socket {$/;"	c
UnassembledBytes	tests/fsm_stream_reassembler_harness.hh	/^    UnassembledBytes(size_t bytes) : _bytes(bytes) {}$/;"	f	struct:UnassembledBytes
UnassembledBytes	tests/fsm_stream_reassembler_harness.hh	/^struct UnassembledBytes : public ReassemblerExpectation {$/;"	s
Write	tests/byte_stream_test_harness.cc	/^Write::Write(const std::string &data) : _data(data) {}$/;"	f	class:Write
Write	tests/byte_stream_test_harness.hh	/^struct Write : public ByteStreamAction {$/;"	s
Write	tests/tcp_expectation.hh	/^    Write(const std::string &data_) : data(data_) {}$/;"	f	struct:Write
Write	tests/tcp_expectation.hh	/^struct Write : public TCPAction {$/;"	s
WriteBytes	tests/sender_harness.hh	/^    WriteBytes(std::string &&bytes) : _bytes(std::move(bytes)), _end_input(false) {}$/;"	f	struct:WriteBytes
WriteBytes	tests/sender_harness.hh	/^struct WriteBytes : public SenderAction {$/;"	s
WrongIPVersion	libsponge/util/parser.hh	/^    WrongIPVersion,   \/\/!< Got a version of IP other than 4$/;"	m	class:ParseResult
_ackno	tests/receiver_harness.hh	/^    std::optional<WrappingInt32> _ackno;$/;"	m	struct:ExpectAckno
_ackno	tests/sender_harness.hh	/^    WrappingInt32 _ackno;$/;"	m	struct:AckReceived
_attempt_and_error	libsponge/util/util.hh	/^    std::string _attempt_and_error;  \/\/!< What was attempted, and what happened$/;"	m	class:tagged_error
_buffer	libsponge/util/parser.hh	/^    Buffer _buffer;$/;"	m	class:NetParser
_buffer_empty	tests/byte_stream_test_harness.hh	/^    bool _buffer_empty;$/;"	m	struct:BufferEmpty
_buffer_size	tests/byte_stream_test_harness.hh	/^    size_t _buffer_size;$/;"	m	struct:BufferSize
_byte_stream	tests/byte_stream_test_harness.hh	/^    ByteStream _byte_stream;$/;"	m	class:ByteStreamTestHarness
_bytes	tests/fsm_stream_reassembler_harness.hh	/^    size_t _bytes;$/;"	m	struct:BytesAssembled
_bytes	tests/fsm_stream_reassembler_harness.hh	/^    size_t _bytes;$/;"	m	struct:UnassembledBytes
_bytes	tests/fsm_stream_reassembler_harness.hh	/^    std::string _bytes;$/;"	m	struct:BytesAvailable
_bytes	tests/receiver_harness.hh	/^    std::string _bytes;$/;"	m	struct:ExpectBytes
_bytes	tests/sender_harness.hh	/^    std::string _bytes;$/;"	m	struct:WriteBytes
_bytes_read	tests/byte_stream_test_harness.hh	/^    size_t _bytes_read;$/;"	m	struct:BytesRead
_bytes_written	tests/byte_stream_test_harness.hh	/^    size_t _bytes_written;$/;"	m	struct:BytesWritten
_capacity	libsponge/stream_reassembler.hh	/^    size_t _capacity;    \/\/!< The maximum number of bytes$/;"	m	class:StreamReassembler
_check_size	libsponge/util/parser.cc	/^void NetParser::_check_size(const size_t size) {$/;"	f	class:NetParser
_closed	libsponge/util/file_descriptor.hh	/^        bool _closed = false;       \/\/!< Flag indicating whether FDWrapper::_fd has been closed$/;"	m	class:FileDescriptor::FDWrapper
_data	tests/byte_stream_test_harness.hh	/^    std::string _data;$/;"	m	struct:Write
_data	tests/fsm_stream_reassembler_harness.hh	/^    std::string _data;$/;"	m	struct:SubmitSegment
_end_input	tests/sender_harness.hh	/^    bool _end_input;$/;"	m	struct:WriteBytes
_eof	libsponge/util/file_descriptor.hh	/^        bool _eof = false;          \/\/!< Flag indicating whether FDWrapper::_fd is at EOF$/;"	m	class:FileDescriptor::FDWrapper
_eof	tests/byte_stream_test_harness.hh	/^    bool _eof;$/;"	m	struct:Eof
_error	libsponge/util/parser.hh	/^    ParseResult _error = ParseResult::NoError;  \/\/!< Result of parsing so far$/;"	m	class:NetParser
_fd	libsponge/util/file_descriptor.hh	/^        int _fd;                    \/\/!< The file descriptor number returned by the kernel$/;"	m	class:FileDescriptor::FDWrapper
_fsm	tests/tcp_fsm_test_harness.hh	/^    TCPConnection _fsm;    \/\/!< The TCPConnection under test$/;"	m	class:TCPTestHarness
_index	tests/fsm_stream_reassembler_harness.hh	/^    size_t _index;$/;"	m	struct:SubmitSegment
_input_ended	tests/byte_stream_test_harness.hh	/^    bool _input_ended;$/;"	m	struct:InputEnded
_interface	tests/network_interface_test_harness.hh	/^    NetworkInterface _interface;$/;"	m	class:NetworkInterfaceTestHarness
_internal_fd	libsponge/util/file_descriptor.hh	/^    std::shared_ptr<FDWrapper> _internal_fd;$/;"	m	class:FileDescriptor
_len	tests/byte_stream_test_harness.hh	/^    size_t _len;$/;"	m	struct:Pop
_ms	tests/network_interface_test_harness.hh	/^    size_t _ms;$/;"	m	struct:Tick
_ms	tests/sender_harness.hh	/^    size_t _ms;$/;"	m	struct:Tick
_n_bytes	tests/receiver_harness.hh	/^    size_t _n_bytes;$/;"	m	struct:ExpectTotalAssembledBytes
_n_bytes	tests/receiver_harness.hh	/^    size_t _n_bytes;$/;"	m	struct:ExpectUnassembledBytes
_n_bytes	tests/sender_harness.hh	/^    size_t _n_bytes;$/;"	m	struct:ExpectBytesInFlight
_output	libsponge/stream_reassembler.hh	/^    ByteStream _output;  \/\/!< The reassembled in-order byte stream$/;"	m	class:StreamReassembler
_output	tests/byte_stream_test_harness.hh	/^    std::string _output;$/;"	m	struct:Peek
_parse_int	libsponge/util/parser.cc	/^T NetParser::_parse_int() {$/;"	f	class:NetParser
_read_count	libsponge/util/file_descriptor.hh	/^        unsigned _read_count = 0;   \/\/!< The number of times FDWrapper::_fd has been read$/;"	m	class:FileDescriptor::FDWrapper
_recv_fd	tests/tcp_fsm_test_harness.hh	/^    TestRFD _recv_fd;  \/\/!< The end of a SOCK_SEQPACKET socket pair from which TCPTestHarness reads$/;"	m	class:TestFD
_remaining_capacity	tests/byte_stream_test_harness.hh	/^    size_t _remaining_capacity;$/;"	m	struct:RemainingCapacity
_seqno	tests/sender_harness.hh	/^    WrappingInt32 _seqno;$/;"	m	struct:ExpectSeqno
_size	libsponge/util/address.hh	/^    socklen_t _size;  \/\/!< Size of the wrapped address.$/;"	m	class:Address
_state	tests/receiver_harness.hh	/^    std::string _state;$/;"	m	struct:ExpectState
_state	tests/sender_harness.hh	/^    std::string _state;$/;"	m	struct:ExpectState
_sum	libsponge/util/util.hh	/^    uint32_t _sum;$/;"	m	class:InternetChecksum
_test_err_if	tests/test_err_if.hh	/^static void _test_err_if(const bool err_condition, const std::string &err_string, const int lineno) {$/;"	f
_test_name	tests/byte_stream_test_harness.hh	/^    std::string _test_name;$/;"	m	class:ByteStreamTestHarness
_test_name	tests/network_interface_test_harness.hh	/^    std::string _test_name;$/;"	m	class:NetworkInterfaceTestHarness
_test_should_be	tests/test_should_be.hh	/^static void _test_should_be(const T &actual,$/;"	f
_unparse_int	libsponge/util/parser.cc	/^void NetUnparser::_unparse_int(string &s, T val) {$/;"	f	class:NetUnparser
_window	tests/receiver_harness.hh	/^    size_t _window;$/;"	m	struct:ExpectWindow
_write_count	libsponge/util/file_descriptor.hh	/^        unsigned _write_count = 0;  \/\/!< The numberof times FDWrapper::_fd has been written$/;"	m	class:FileDescriptor::FDWrapper
a_dns_server_numeric	doctests/address_example_3.cc	/^const uint32_t a_dns_server_numeric = a_dns_server.ipv4_numeric();$/;"	v
accept	libsponge/util/socket.cc	/^TCPSocket TCPSocket::accept() {$/;"	f	class:TCPSocket
ack_listen_test	tests/fsm_ack_rst.cc	/^static void ack_listen_test(const TCPConfig &cfg,$/;"	f	file:
ack_listen_test	tests/fsm_ack_rst_relaxed.cc	/^static void ack_listen_test(const TCPConfig &cfg,$/;"	f	file:
ack_rst_syn_sent_test	tests/fsm_ack_rst.cc	/^static void ack_rst_syn_sent_test(const TCPConfig &cfg,$/;"	f	file:
ack_rst_syn_sent_test	tests/fsm_ack_rst_relaxed.cc	/^static void ack_rst_syn_sent_test(const TCPConfig &cfg,$/;"	f	file:
add	libsponge/util/util.cc	/^void InternetChecksum::add(std::string_view data) {$/;"	f	class:InternetChecksum
add_rule	libsponge/util/eventloop.cc	/^void EventLoop::add_rule(const FileDescriptor &fd,$/;"	f	class:EventLoop
append	libsponge/util/buffer.cc	/^void BufferList::append(const BufferList &other) {$/;"	f	class:BufferList
append_data	tests/tcp_expectation.hh	/^static void append_data(std::ostream &os, std::string_view data) {$/;"	f
as_iovecs	libsponge/util/buffer.cc	/^vector<iovec> BufferViewList::as_iovecs() const {$/;"	f	class:BufferViewList
as_string	libsponge/util/parser.cc	/^string as_string(const ParseResult r) {$/;"	f
as_string	tests/string_conversions.hh	/^std::string as_string(T &&t) {$/;"	f	namespace:sponge_conversions
at	libsponge/util/buffer.hh	/^    uint8_t at(const size_t n) const { return str().at(n); }$/;"	f	class:Buffer
bind	libsponge/util/socket.cc	/^void Socket::bind(const Address &address) { SystemCall("bind", ::bind(fd_num(), address, address.size())); }$/;"	f	class:Socket
buffer	doctests/parser_example.cc	/^std::string buffer;$/;"	v
buffer	libsponge/util/parser.hh	/^    Buffer buffer() const { return _buffer; }$/;"	f	class:NetParser
buffer_empty	libsponge/byte_stream.cc	/^bool ByteStream::buffer_empty() const {$/;"	f	class:ByteStream
buffer_size	libsponge/byte_stream.cc	/^size_t ByteStream::buffer_size() const {$/;"	f	class:ByteStream
buffers	libsponge/util/buffer.hh	/^    const std::deque<Buffer> &buffers() const { return _buffers; }$/;"	f	class:BufferList
build_segment	tests/receiver_harness.hh	/^    TCPSegment build_segment() const {$/;"	f	struct:SegmentArrives
bytes	tests/tcp_expectation.hh	/^    uint64_t bytes;$/;"	m	struct:ExpectBytesInFlight
bytes	tests/tcp_expectation.hh	/^    uint64_t bytes;$/;"	m	struct:ExpectUnassembledBytes
bytes_read	libsponge/byte_stream.cc	/^size_t ByteStream::bytes_read() const {$/;"	f	class:ByteStream
bytes_written	libsponge/byte_stream.cc	/^size_t ByteStream::bytes_written() const {$/;"	f	class:ByteStream
callback	libsponge/util/eventloop.hh	/^        CallbackT callback;   \/\/!< A callback that reads or writes fd.$/;"	m	class:EventLoop::Direction::Rule
can_read	tests/tcp_fsm_test_harness.cc	/^bool TestFD::TestRFD::can_read() const {$/;"	f	class:TestFD::TestRFD
can_read	tests/tcp_fsm_test_harness.hh	/^    bool can_read() const { return _flt.can_read(); }$/;"	f	class:TCPTestHarness
can_read	tests/tcp_fsm_test_harness.hh	/^    bool can_read() const { return _recv_fd.can_read(); }  \/\/!< Is TestFD::_recv_fd readable?$/;"	f	class:TestFD
cancel	libsponge/util/eventloop.hh	/^        CallbackT cancel;     \/\/!< A callback that is called when the rule is cancelled (e.g. on hangup)$/;"	m	class:EventLoop::Direction::Rule
check_empty	tests/send_equivalence_checker.cc	/^void SendEquivalenceChecker::check_empty() const {$/;"	f	class:SendEquivalenceChecker
check_equivalent_segments	tests/send_equivalence_checker.cc	/^void check_equivalent_segments(const TCPSegment &a, const TCPSegment &b) {$/;"	f
check_roundtrip	tests/wrapping_integers_roundtrip.cc	/^void check_roundtrip(const WrappingInt32 isn, const uint64_t value, const uint64_t checkpoint) {$/;"	f
check_segment	tests/fsm_retx.hh	/^static void check_segment(TCPTestHarness &test, const std::string &data, const bool multiple, const int lineno) {$/;"	f
close	libsponge/util/file_descriptor.cc	/^void FileDescriptor::FDWrapper::close() {$/;"	f	class:FileDescriptor::FDWrapper
close	libsponge/util/file_descriptor.hh	/^    void close() { _internal_fd->close(); }$/;"	f	class:FileDescriptor
closed	libsponge/util/file_descriptor.hh	/^    bool closed() const { return _internal_fd->_closed; }$/;"	f	class:FileDescriptor
collect_output	tests/sender_harness.hh	/^    void collect_output() {$/;"	f	class:TCPSenderTestHarness
compare_ip_headers	tests/test_utils_ipv4.hh	/^inline bool compare_ip_headers(const IPv4Header &h1, const IPv4Header &h2) {$/;"	f
compare_ip_headers_nolen	tests/test_utils_ipv4.hh	/^inline bool compare_ip_headers_nolen(const IPv4Header &h1, const IPv4Header &h2) {$/;"	f
compare_tcp_headers	tests/test_utils.hh	/^inline bool compare_tcp_headers(const TCPHeader &h1, const TCPHeader &h2) {$/;"	f
compare_tcp_headers_nolen	tests/test_utils.hh	/^inline bool compare_tcp_headers_nolen(const TCPHeader &h1, const TCPHeader &h2) {$/;"	f
concatenate	libsponge/util/buffer.cc	/^string BufferList::concatenate() const {$/;"	f	class:BufferList
config_segment	tests/tcp_fsm_test_harness.cc	/^void TestFdAdapter::config_segment(TCPSegment &seg) {$/;"	f	class:TestFdAdapter
connect	libsponge/util/socket.cc	/^void Socket::connect(const Address &address) { SystemCall("connect", ::connect(fd_num(), address, address.size())); }$/;"	f	class:Socket
copy	libsponge/util/buffer.hh	/^    std::string copy() const { return std::string(str()); }$/;"	f	class:Buffer
data	tests/tcp_expectation.hh	/^    std::string data;$/;"	m	struct:Write
description	tests/byte_stream_test_harness.cc	/^std::string BufferEmpty::description() const { return "buffer_empty: " + to_string(_buffer_empty); }$/;"	f	class:BufferEmpty
description	tests/byte_stream_test_harness.cc	/^std::string BufferSize::description() const { return "buffer_size: " + to_string(_buffer_size); }$/;"	f	class:BufferSize
description	tests/byte_stream_test_harness.cc	/^std::string ByteStreamAction::description() const { return "description missing"; }$/;"	f	class:ByteStreamAction
description	tests/byte_stream_test_harness.cc	/^std::string ByteStreamExpectation::description() const { return "description missing"; }$/;"	f	class:ByteStreamExpectation
description	tests/byte_stream_test_harness.cc	/^std::string BytesRead::description() const { return "bytes_read: " + to_string(_bytes_read); }$/;"	f	class:BytesRead
description	tests/byte_stream_test_harness.cc	/^std::string BytesWritten::description() const { return "bytes_written: " + to_string(_bytes_written); }$/;"	f	class:BytesWritten
description	tests/byte_stream_test_harness.cc	/^std::string EndInput::description() const { return "end input"; }$/;"	f	class:EndInput
description	tests/byte_stream_test_harness.cc	/^std::string Eof::description() const { return "eof: " + to_string(_eof); }$/;"	f	class:Eof
description	tests/byte_stream_test_harness.cc	/^std::string InputEnded::description() const { return "input_ended: " + to_string(_input_ended); }$/;"	f	class:InputEnded
description	tests/byte_stream_test_harness.cc	/^std::string Peek::description() const { return "\\"" + _output + "\\" at the front of the stream"; }$/;"	f	class:Peek
description	tests/byte_stream_test_harness.cc	/^std::string Pop::description() const { return "pop " + to_string(_len); }$/;"	f	class:Pop
description	tests/byte_stream_test_harness.cc	/^std::string RemainingCapacity::description() const { return "remaining_capacity: " + to_string(_remaining_capacity); }$/;"	f	class:RemainingCapacity
description	tests/byte_stream_test_harness.cc	/^std::string Write::description() const { return "write \\"" + _data + "\\" to the stream"; }$/;"	f	class:Write
description	tests/fsm_stream_reassembler_harness.hh	/^    std::string description() const {$/;"	f	struct:AtEof
description	tests/fsm_stream_reassembler_harness.hh	/^    std::string description() const {$/;"	f	struct:BytesAssembled
description	tests/fsm_stream_reassembler_harness.hh	/^    std::string description() const {$/;"	f	struct:BytesAvailable
description	tests/fsm_stream_reassembler_harness.hh	/^    std::string description() const {$/;"	f	struct:NotAtEof
description	tests/fsm_stream_reassembler_harness.hh	/^    std::string description() const {$/;"	f	struct:SubmitSegment
description	tests/fsm_stream_reassembler_harness.hh	/^    std::string description() const {$/;"	f	struct:UnassembledBytes
description	tests/fsm_stream_reassembler_harness.hh	/^    virtual std::string description() const { return "description missing"; }$/;"	f	struct:ReassemblerAction
description	tests/fsm_stream_reassembler_harness.hh	/^    virtual std::string description() const { return "description missing"; }$/;"	f	struct:ReassemblerExpectation
description	tests/network_interface_test_harness.cc	/^std::string NetworkInterfaceAction::description() const { return "description missing"; }$/;"	f	class:NetworkInterfaceAction
description	tests/network_interface_test_harness.cc	/^std::string NetworkInterfaceExpectation::description() const { return "description missing"; }$/;"	f	class:NetworkInterfaceExpectation
description	tests/network_interface_test_harness.cc	/^string ExpectFrame::description() const { return "frame transmitted (" + summary(expected) + ")"; }$/;"	f	class:ExpectFrame
description	tests/network_interface_test_harness.cc	/^string ExpectNoFrame::description() const { return "no frame transmitted"; }$/;"	f	class:ExpectNoFrame
description	tests/network_interface_test_harness.cc	/^string ReceiveFrame::description() const { return "frame arrives (" + summary(frame) + ")"; }$/;"	f	class:ReceiveFrame
description	tests/network_interface_test_harness.cc	/^string SendDatagram::description() const {$/;"	f	class:SendDatagram
description	tests/network_interface_test_harness.cc	/^string Tick::description() const { return to_string(_ms) + " ms pass"; }$/;"	f	class:Tick
description	tests/receiver_harness.hh	/^    std::string description() const { return "in state `" + _state + "`"; }$/;"	f	struct:ExpectState
description	tests/receiver_harness.hh	/^    std::string description() const { return "receiver.stream_out().eof() == true"; }$/;"	f	struct:ExpectEof
description	tests/receiver_harness.hh	/^    std::string description() const { return "receiver.stream_out().input_ended() == false"; }$/;"	f	struct:ExpectInputNotEnded
description	tests/receiver_harness.hh	/^    std::string description() const { return "window " + std::to_string(_window); }$/;"	f	struct:ExpectWindow
description	tests/receiver_harness.hh	/^    std::string description() const { return std::to_string(_n_bytes) + " assembled bytes, in total"; }$/;"	f	struct:ExpectTotalAssembledBytes
description	tests/receiver_harness.hh	/^    std::string description() const { return std::to_string(_n_bytes) + " unassembled bytes"; }$/;"	f	struct:ExpectUnassembledBytes
description	tests/receiver_harness.hh	/^    std::string description() const {$/;"	f	struct:ExpectAckno
description	tests/receiver_harness.hh	/^    std::string description() const {$/;"	f	struct:ExpectBytes
description	tests/receiver_harness.hh	/^    virtual std::string description() const { return "description missing"; }$/;"	f	struct:ReceiverAction
description	tests/receiver_harness.hh	/^    virtual std::string description() const { return "description missing"; }$/;"	f	struct:ReceiverExpectation
description	tests/sender_harness.hh	/^    std::string description() const { return "close"; }$/;"	f	struct:Close
description	tests/sender_harness.hh	/^    std::string description() const { return "in state `" + _state + "`"; }$/;"	f	struct:ExpectState
description	tests/sender_harness.hh	/^    std::string description() const { return "next seqno " + std::to_string(_seqno.raw_value()); }$/;"	f	struct:ExpectSeqno
description	tests/sender_harness.hh	/^    std::string description() const { return "no (more) segments"; }$/;"	f	struct:ExpectNoSegment
description	tests/sender_harness.hh	/^    std::string description() const { return std::to_string(_n_bytes) + " bytes in flight"; }$/;"	f	struct:ExpectBytesInFlight
description	tests/sender_harness.hh	/^    std::string description() const {$/;"	f	struct:AckReceived
description	tests/sender_harness.hh	/^    std::string description() const {$/;"	f	struct:Tick
description	tests/sender_harness.hh	/^    std::string description() const {$/;"	f	struct:WriteBytes
description	tests/sender_harness.hh	/^    virtual std::string description() const { return "description missing"; }$/;"	f	struct:SenderAction
description	tests/sender_harness.hh	/^    virtual std::string description() const { return "description missing"; }$/;"	f	struct:SenderExpectation
description	tests/sender_harness.hh	/^    virtual std::string description() const { return "segment sent with " + segment_description(); }$/;"	f	struct:ExpectSegment
description	tests/tcp_expectation.hh	/^    std::string description() const { return "close"; }$/;"	f	struct:Close
description	tests/tcp_expectation.hh	/^    std::string description() const { return "connect"; }$/;"	f	struct:Connect
description	tests/tcp_expectation.hh	/^    std::string description() const { return "exactly one segment sent with " + segment_description(); }$/;"	f	struct:ExpectOneSegment
description	tests/tcp_expectation.hh	/^    std::string description() const { return "listen"; }$/;"	f	struct:Listen
description	tests/tcp_expectation.hh	/^    std::string description() const { return "no (more) data available"; }$/;"	f	struct:ExpectNoData
description	tests/tcp_expectation.hh	/^    std::string description() const { return "no (more) segments sent"; }$/;"	f	struct:ExpectNoSegment
description	tests/tcp_expectation.hh	/^    std::string description() const { return "segment sent"; }$/;"	f	struct:ExpectSegmentAvailable
description	tests/tcp_expectation.hh	/^    std::string description() const {$/;"	f	struct:ExpectBytesInFlight
description	tests/tcp_expectation.hh	/^    std::string description() const {$/;"	f	struct:ExpectData
description	tests/tcp_expectation.hh	/^    std::string description() const {$/;"	f	struct:ExpectLingerTimer
description	tests/tcp_expectation.hh	/^    std::string description() const {$/;"	f	struct:ExpectNotInState
description	tests/tcp_expectation.hh	/^    std::string description() const {$/;"	f	struct:ExpectState
description	tests/tcp_expectation.hh	/^    std::string description() const {$/;"	f	struct:ExpectUnassembledBytes
description	tests/tcp_expectation.hh	/^    std::string description() const {$/;"	f	struct:Tick
description	tests/tcp_expectation.hh	/^    std::string description() const {$/;"	f	struct:Write
description	tests/tcp_expectation.hh	/^    virtual std::string description() const { return "description missing"; }$/;"	f	struct:TCPAction
description	tests/tcp_expectation.hh	/^    virtual std::string description() const { return "description missing"; }$/;"	f	struct:TCPExpectation
description	tests/tcp_expectation.hh	/^    virtual std::string description() const { return "segment sent with " + segment_description(); }$/;"	f	struct:ExpectSegment
description	tests/tcp_expectation.hh	/^    virtual std::string description() const {$/;"	f	struct:SendSegment
dgram	tests/network_interface_test_harness.hh	/^    InternetDatagram dgram;$/;"	m	struct:SendDatagram
direction	libsponge/util/eventloop.hh	/^        Direction direction;  \/\/!< Direction::In for reading from fd, Direction::Out for writing to fd.$/;"	m	class:EventLoop::Direction::Rule
duplicate	libsponge/util/file_descriptor.cc	/^FileDescriptor FileDescriptor::duplicate() const { return FileDescriptor(_internal_fd); }$/;"	f	class:FileDescriptor
empty	libsponge/stream_reassembler.cc	/^bool StreamReassembler::empty() const { return {}; }$/;"	f	class:StreamReassembler
end_input	libsponge/byte_stream.cc	/^void ByteStream::end_input() {$/;"	f	class:ByteStream
eof	libsponge/byte_stream.cc	/^bool ByteStream::eof() const {$/;"	f	class:ByteStream
eof	libsponge/util/file_descriptor.hh	/^    bool eof() const { return _internal_fd->_eof; }$/;"	f	class:FileDescriptor
err_num	tests/test_err_if.hh	/^static int err_num = 1;$/;"	v
error	libsponge/byte_stream.hh	/^    bool error() const { return _error; }$/;"	f	class:ByteStream
error	libsponge/util/parser.hh	/^    bool error() const { return get_error() != ParseResult::NoError; }$/;"	f	class:NetParser
execute	tests/byte_stream_test_harness.cc	/^void BufferEmpty::execute(ByteStream &bs) const {$/;"	f	class:BufferEmpty
execute	tests/byte_stream_test_harness.cc	/^void BufferSize::execute(ByteStream &bs) const {$/;"	f	class:BufferSize
execute	tests/byte_stream_test_harness.cc	/^void ByteStreamAction::execute(ByteStream &) const {}$/;"	f	class:ByteStreamAction
execute	tests/byte_stream_test_harness.cc	/^void ByteStreamExpectation::execute(ByteStream &) const {}$/;"	f	class:ByteStreamExpectation
execute	tests/byte_stream_test_harness.cc	/^void ByteStreamTestHarness::execute(const ByteStreamTestStep &step) {$/;"	f	class:ByteStreamTestHarness
execute	tests/byte_stream_test_harness.cc	/^void ByteStreamTestStep::execute(ByteStream &) const {}$/;"	f	class:ByteStreamTestStep
execute	tests/byte_stream_test_harness.cc	/^void BytesRead::execute(ByteStream &bs) const {$/;"	f	class:BytesRead
execute	tests/byte_stream_test_harness.cc	/^void BytesWritten::execute(ByteStream &bs) const {$/;"	f	class:BytesWritten
execute	tests/byte_stream_test_harness.cc	/^void EndInput::execute(ByteStream &bs) const { bs.end_input(); }$/;"	f	class:EndInput
execute	tests/byte_stream_test_harness.cc	/^void Eof::execute(ByteStream &bs) const {$/;"	f	class:Eof
execute	tests/byte_stream_test_harness.cc	/^void InputEnded::execute(ByteStream &bs) const {$/;"	f	class:InputEnded
execute	tests/byte_stream_test_harness.cc	/^void Peek::execute(ByteStream &bs) const {$/;"	f	class:Peek
execute	tests/byte_stream_test_harness.cc	/^void Pop::execute(ByteStream &bs) const { bs.pop_output(_len); }$/;"	f	class:Pop
execute	tests/byte_stream_test_harness.cc	/^void RemainingCapacity::execute(ByteStream &bs) const {$/;"	f	class:RemainingCapacity
execute	tests/byte_stream_test_harness.cc	/^void Write::execute(ByteStream &bs) const {$/;"	f	class:Write
execute	tests/fsm_stream_reassembler_harness.hh	/^    virtual void execute(StreamReassembler &) const {}$/;"	f	struct:ReassemblerAction
execute	tests/fsm_stream_reassembler_harness.hh	/^    virtual void execute(StreamReassembler &) const {}$/;"	f	struct:ReassemblerExpectation
execute	tests/fsm_stream_reassembler_harness.hh	/^    virtual void execute(StreamReassembler &) const {}$/;"	f	struct:ReassemblerTestStep
execute	tests/fsm_stream_reassembler_harness.hh	/^    void execute(StreamReassembler &reassembler) const { reassembler.push_substring(_data, _index, _eof); }$/;"	f	struct:SubmitSegment
execute	tests/fsm_stream_reassembler_harness.hh	/^    void execute(StreamReassembler &reassembler) const {$/;"	f	struct:AtEof
execute	tests/fsm_stream_reassembler_harness.hh	/^    void execute(StreamReassembler &reassembler) const {$/;"	f	struct:BytesAssembled
execute	tests/fsm_stream_reassembler_harness.hh	/^    void execute(StreamReassembler &reassembler) const {$/;"	f	struct:BytesAvailable
execute	tests/fsm_stream_reassembler_harness.hh	/^    void execute(StreamReassembler &reassembler) const {$/;"	f	struct:NotAtEof
execute	tests/fsm_stream_reassembler_harness.hh	/^    void execute(StreamReassembler &reassembler) const {$/;"	f	struct:UnassembledBytes
execute	tests/fsm_stream_reassembler_harness.hh	/^    void execute(const ReassemblerTestStep &step) {$/;"	f	class:ReassemblerTestHarness
execute	tests/network_interface_test_harness.cc	/^void ExpectFrame::execute(NetworkInterface &interface) const {$/;"	f	class:ExpectFrame
execute	tests/network_interface_test_harness.cc	/^void ExpectNoFrame::execute(NetworkInterface &interface) const {$/;"	f	class:ExpectNoFrame
execute	tests/network_interface_test_harness.cc	/^void NetworkInterfaceAction::execute(NetworkInterface &) const {}$/;"	f	class:NetworkInterfaceAction
execute	tests/network_interface_test_harness.cc	/^void NetworkInterfaceExpectation::execute(NetworkInterface &) const {}$/;"	f	class:NetworkInterfaceExpectation
execute	tests/network_interface_test_harness.cc	/^void NetworkInterfaceTestHarness::execute(const NetworkInterfaceTestStep &step) {$/;"	f	class:NetworkInterfaceTestHarness
execute	tests/network_interface_test_harness.cc	/^void NetworkInterfaceTestStep::execute(NetworkInterface &) const {}$/;"	f	class:NetworkInterfaceTestStep
execute	tests/network_interface_test_harness.cc	/^void ReceiveFrame::execute(NetworkInterface &interface) const {$/;"	f	class:ReceiveFrame
execute	tests/network_interface_test_harness.cc	/^void SendDatagram::execute(NetworkInterface &interface) const { interface.send_datagram(dgram, next_hop); }$/;"	f	class:SendDatagram
execute	tests/network_interface_test_harness.cc	/^void Tick::execute(NetworkInterface &interface) const { interface.tick(_ms); }$/;"	f	class:Tick
execute	tests/receiver_harness.hh	/^    virtual void execute(TCPReceiver &) const {}$/;"	f	struct:ReceiverAction
execute	tests/receiver_harness.hh	/^    virtual void execute(TCPReceiver &) const {}$/;"	f	struct:ReceiverExpectation
execute	tests/receiver_harness.hh	/^    virtual void execute(TCPReceiver &) const {}$/;"	f	struct:ReceiverTestStep
execute	tests/receiver_harness.hh	/^    void execute(TCPReceiver &receiver) const {$/;"	f	struct:ExpectAckno
execute	tests/receiver_harness.hh	/^    void execute(TCPReceiver &receiver) const {$/;"	f	struct:ExpectBytes
execute	tests/receiver_harness.hh	/^    void execute(TCPReceiver &receiver) const {$/;"	f	struct:ExpectEof
execute	tests/receiver_harness.hh	/^    void execute(TCPReceiver &receiver) const {$/;"	f	struct:ExpectInputNotEnded
execute	tests/receiver_harness.hh	/^    void execute(TCPReceiver &receiver) const {$/;"	f	struct:ExpectState
execute	tests/receiver_harness.hh	/^    void execute(TCPReceiver &receiver) const {$/;"	f	struct:ExpectTotalAssembledBytes
execute	tests/receiver_harness.hh	/^    void execute(TCPReceiver &receiver) const {$/;"	f	struct:ExpectUnassembledBytes
execute	tests/receiver_harness.hh	/^    void execute(TCPReceiver &receiver) const {$/;"	f	struct:ExpectWindow
execute	tests/receiver_harness.hh	/^    void execute(const ReceiverTestStep &step) {$/;"	f	class:TCPReceiverTestHarness
execute	tests/sender_harness.hh	/^    virtual void execute(TCPSender &, std::queue<TCPSegment> &) const {}$/;"	f	struct:SenderAction
execute	tests/sender_harness.hh	/^    virtual void execute(TCPSender &, std::queue<TCPSegment> &) const {}$/;"	f	struct:SenderExpectation
execute	tests/sender_harness.hh	/^    virtual void execute(TCPSender &, std::queue<TCPSegment> &) const {}$/;"	f	struct:SenderTestStep
execute	tests/sender_harness.hh	/^    void execute(TCPSender &, std::queue<TCPSegment> &segments) const {$/;"	f	struct:ExpectNoSegment
execute	tests/sender_harness.hh	/^    void execute(TCPSender &, std::queue<TCPSegment> &segments) const {$/;"	f	struct:ExpectSegment
execute	tests/sender_harness.hh	/^    void execute(TCPSender &sender, std::queue<TCPSegment> &) const {$/;"	f	struct:AckReceived
execute	tests/sender_harness.hh	/^    void execute(TCPSender &sender, std::queue<TCPSegment> &) const {$/;"	f	struct:Close
execute	tests/sender_harness.hh	/^    void execute(TCPSender &sender, std::queue<TCPSegment> &) const {$/;"	f	struct:ExpectBytesInFlight
execute	tests/sender_harness.hh	/^    void execute(TCPSender &sender, std::queue<TCPSegment> &) const {$/;"	f	struct:ExpectSeqno
execute	tests/sender_harness.hh	/^    void execute(TCPSender &sender, std::queue<TCPSegment> &) const {$/;"	f	struct:ExpectState
execute	tests/sender_harness.hh	/^    void execute(TCPSender &sender, std::queue<TCPSegment> &) const {$/;"	f	struct:Tick
execute	tests/sender_harness.hh	/^    void execute(TCPSender &sender, std::queue<TCPSegment> &) const {$/;"	f	struct:WriteBytes
execute	tests/sender_harness.hh	/^    void execute(const SenderTestStep &step) {$/;"	f	class:TCPSenderTestHarness
execute	tests/tcp_expectation.hh	/^    virtual void execute(TCPTestHarness &) const {}$/;"	f	struct:TCPAction
execute	tests/tcp_expectation.hh	/^    virtual void execute(TCPTestHarness &) const {}$/;"	f	struct:TCPExpectation
execute	tests/tcp_expectation.hh	/^    virtual void execute(TCPTestHarness &harness) const { expect_seg(harness); }$/;"	f	struct:ExpectSegment
execute	tests/tcp_expectation.hh	/^    virtual void execute(TCPTestHarness &harness) const {$/;"	f	struct:SendSegment
execute	tests/tcp_expectation.hh	/^    void execute(TCPTestHarness &) const {}$/;"	f	struct:Listen
execute	tests/tcp_expectation.hh	/^    void execute(TCPTestHarness &harness) const { harness._fsm.connect(); }$/;"	f	struct:Connect
execute	tests/tcp_expectation.hh	/^    void execute(TCPTestHarness &harness) const { harness._fsm.end_input_stream(); }$/;"	f	struct:Close
execute	tests/tcp_expectation.hh	/^    void execute(TCPTestHarness &harness) const { harness._fsm.tick(ms_since_last_tick); }$/;"	f	struct:Tick
execute	tests/tcp_expectation.hh	/^    void execute(TCPTestHarness &harness) const {$/;"	f	struct:ExpectBytesInFlight
execute	tests/tcp_expectation.hh	/^    void execute(TCPTestHarness &harness) const {$/;"	f	struct:ExpectData
execute	tests/tcp_expectation.hh	/^    void execute(TCPTestHarness &harness) const {$/;"	f	struct:ExpectLingerTimer
execute	tests/tcp_expectation.hh	/^    void execute(TCPTestHarness &harness) const {$/;"	f	struct:ExpectNoData
execute	tests/tcp_expectation.hh	/^    void execute(TCPTestHarness &harness) const {$/;"	f	struct:ExpectNoSegment
execute	tests/tcp_expectation.hh	/^    void execute(TCPTestHarness &harness) const {$/;"	f	struct:ExpectNotInState
execute	tests/tcp_expectation.hh	/^    void execute(TCPTestHarness &harness) const {$/;"	f	struct:ExpectOneSegment
execute	tests/tcp_expectation.hh	/^    void execute(TCPTestHarness &harness) const {$/;"	f	struct:ExpectSegmentAvailable
execute	tests/tcp_expectation.hh	/^    void execute(TCPTestHarness &harness) const {$/;"	f	struct:ExpectState
execute	tests/tcp_expectation.hh	/^    void execute(TCPTestHarness &harness) const {$/;"	f	struct:ExpectUnassembledBytes
execute	tests/tcp_expectation.hh	/^    void execute(TCPTestHarness &harness) const {$/;"	f	struct:Write
execute	tests/tcp_expectation_forward.hh	/^    virtual void execute(TCPTestHarness &) const {}$/;"	f	struct:TCPTestStep
execute	tests/tcp_fsm_test_harness.cc	/^void TCPTestHarness::execute(const TCPTestStep &step, std::string note) {$/;"	f	class:TCPTestHarness
expect_seg	tests/tcp_expectation.hh	/^    TCPSegment expect_seg(TCPTestHarness &harness) const {$/;"	f	struct:ExpectOneSegment
expect_seg	tests/tcp_expectation.hh	/^    virtual TCPSegment expect_seg(TCPTestHarness &harness) const {$/;"	f	struct:ExpectSegment
expect_seg	tests/tcp_expectation_forward.hh	/^    virtual TCPSegment expect_seg(TCPTestHarness &) const { throw std::runtime_error("unimplemented"); }$/;"	f	struct:TCPTestStep
expect_seg	tests/tcp_fsm_test_harness.cc	/^TCPSegment TCPTestHarness::expect_seg(const ExpectSegment &expectation, std::string note) {$/;"	f	class:TCPTestHarness
expected	tests/network_interface_test_harness.hh	/^    EthernetFrame expected;$/;"	m	struct:ExpectFrame
expected	tests/network_interface_test_harness.hh	/^    std::optional<InternetDatagram> expected;$/;"	m	struct:ReceiveFrame
fd	libsponge/util/eventloop.hh	/^        FileDescriptor fd;    \/\/!< FileDescriptor to monitor for activity.$/;"	m	class:EventLoop::Direction::Rule
fd_num	libsponge/util/file_descriptor.hh	/^    int fd_num() const { return _internal_fd->_fd; }$/;"	f	class:FileDescriptor
frame	tests/network_interface_test_harness.hh	/^    EthernetFrame frame;$/;"	m	struct:ReceiveFrame
from_ipv4_numeric	libsponge/util/address.cc	/^Address Address::from_ipv4_numeric(const uint32_t ip_address) {$/;"	f	class:Address
gai_error_category	libsponge/util/address.cc	/^class gai_error_category : public error_category {$/;"	c	file:
get_URL	apps/webget.cc	/^void get_URL(const string &host, const string &path) {$/;"	f
get_address	libsponge/util/socket.cc	/^Address Socket::get_address(const string &name_of_function,$/;"	f	class:Socket
get_error	libsponge/util/parser.hh	/^    ParseResult get_error() const { return _error; }$/;"	f	class:NetParser
get_random_generator	libsponge/util/util.cc	/^mt19937 get_random_generator() {$/;"	f
get_segment	tests/tcp_expectation.hh	/^    TCPSegment get_segment() const {$/;"	f	struct:SendSegment
hexdump	libsponge/util/util.cc	/^void hexdump(const char *data, const size_t len, const size_t indent) {$/;"	f
hexdump	libsponge/util/util.cc	/^void hexdump(const uint8_t *data, const size_t len, const size_t indent) {$/;"	f
in_close_wait	tests/tcp_fsm_test_harness.cc	/^TCPTestHarness TCPTestHarness::in_close_wait(const TCPConfig &cfg,$/;"	f	class:TCPTestHarness
in_closing	tests/tcp_fsm_test_harness.cc	/^TCPTestHarness TCPTestHarness::in_closing(const TCPConfig &cfg,$/;"	f	class:TCPTestHarness
in_established	tests/tcp_fsm_test_harness.cc	/^TCPTestHarness TCPTestHarness::in_established(const TCPConfig &cfg,$/;"	f	class:TCPTestHarness
in_fin_wait_1	tests/tcp_fsm_test_harness.cc	/^TCPTestHarness TCPTestHarness::in_fin_wait_1(const TCPConfig &cfg,$/;"	f	class:TCPTestHarness
in_fin_wait_2	tests/tcp_fsm_test_harness.cc	/^TCPTestHarness TCPTestHarness::in_fin_wait_2(const TCPConfig &cfg,$/;"	f	class:TCPTestHarness
in_last_ack	tests/tcp_fsm_test_harness.cc	/^TCPTestHarness TCPTestHarness::in_last_ack(const TCPConfig &cfg,$/;"	f	class:TCPTestHarness
in_listen	tests/tcp_fsm_test_harness.cc	/^TCPTestHarness TCPTestHarness::in_listen(const TCPConfig &cfg) {$/;"	f	class:TCPTestHarness
in_syn_sent	tests/tcp_fsm_test_harness.cc	/^TCPTestHarness TCPTestHarness::in_syn_sent(const TCPConfig &cfg, const WrappingInt32 tx_isn) {$/;"	f	class:TCPTestHarness
in_time_wait	tests/tcp_fsm_test_harness.cc	/^TCPTestHarness TCPTestHarness::in_time_wait(const TCPConfig &cfg,$/;"	f	class:TCPTestHarness
inet_cksum	tests/ipv4_parser.cc	/^uint16_t inet_cksum(const uint8_t *data, const size_t len) {$/;"	f
inet_cksum	tests/tcp_parser.cc	/^uint16_t inet_cksum(const uint8_t *data, const size_t len) {$/;"	f
input_ended	libsponge/byte_stream.cc	/^bool ByteStream::input_ended() const {$/;"	f	class:ByteStream
interest	libsponge/util/eventloop.hh	/^        InterestT interest;   \/\/!< A callback that returns `true` whenever fd should be polled.$/;"	m	class:EventLoop::Direction::Rule
ip	libsponge/util/address.hh	/^    std::string ip() const { return ip_port().first; }$/;"	f	class:Address
ip_port	libsponge/util/address.cc	/^pair<string, uint16_t> Address::ip_port() const {$/;"	f	class:Address
ipv4_numeric	libsponge/util/address.cc	/^uint32_t Address::ipv4_numeric() const {$/;"	f	class:Address
listen	libsponge/util/socket.cc	/^void TCPSocket::listen(const int backlog) { SystemCall("listen", ::listen(fd_num(), backlog)); }$/;"	f	class:TCPSocket
local_address	libsponge/util/socket.cc	/^Address Socket::local_address() const { return get_address("getsockname", getsockname); }$/;"	f	class:Socket
main	apps/webget.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	doctests/address_dt.cc	/^int main() {$/;"	f
main	doctests/parser_dt.cc	/^int main() {$/;"	f
main	doctests/socket_dt.cc	/^int main() {$/;"	f
main	tests/byte_stream_capacity.cc	/^int main() {$/;"	f
main	tests/byte_stream_construction.cc	/^int main() {$/;"	f
main	tests/byte_stream_many_writes.cc	/^int main() {$/;"	f
main	tests/byte_stream_one_write.cc	/^int main() {$/;"	f
main	tests/byte_stream_two_writes.cc	/^int main() {$/;"	f
main	tests/fsm_ack_rst.cc	/^int main() {$/;"	f
main	tests/fsm_ack_rst_relaxed.cc	/^int main() {$/;"	f
main	tests/fsm_ack_rst_win.cc	/^int main() {$/;"	f
main	tests/fsm_ack_rst_win_relaxed.cc	/^int main() {$/;"	f
main	tests/fsm_active_close.cc	/^int main() {$/;"	f
main	tests/fsm_connect.cc	/^int main() {$/;"	f
main	tests/fsm_connect_relaxed.cc	/^int main() {$/;"	f
main	tests/fsm_listen.cc	/^int main() {$/;"	f
main	tests/fsm_listen_relaxed.cc	/^int main() {$/;"	f
main	tests/fsm_loopback.cc	/^int main() {$/;"	f
main	tests/fsm_loopback_win.cc	/^int main() {$/;"	f
main	tests/fsm_passive_close.cc	/^int main() {$/;"	f
main	tests/fsm_reorder.cc	/^int main() {$/;"	f
main	tests/fsm_retx.cc	/^int main() {$/;"	f
main	tests/fsm_retx_relaxed.cc	/^int main() {$/;"	f
main	tests/fsm_retx_win.cc	/^int main() {$/;"	f
main	tests/fsm_stream_reassembler_cap.cc	/^int main() {$/;"	f
main	tests/fsm_stream_reassembler_dup.cc	/^int main() {$/;"	f
main	tests/fsm_stream_reassembler_holes.cc	/^int main() {$/;"	f
main	tests/fsm_stream_reassembler_many.cc	/^int main() {$/;"	f
main	tests/fsm_stream_reassembler_overlapping.cc	/^int main() {$/;"	f
main	tests/fsm_stream_reassembler_seq.cc	/^int main() {$/;"	f
main	tests/fsm_stream_reassembler_single.cc	/^int main() {$/;"	f
main	tests/fsm_stream_reassembler_win.cc	/^int main() {$/;"	f
main	tests/fsm_winsize.cc	/^int main() {$/;"	f
main	tests/ipv4_parser.cc	/^int main(int argc, char **argv) {$/;"	f
main	tests/net_interface.cc	/^int main() {$/;"	f
main	tests/recv_close.cc	/^int main() {$/;"	f
main	tests/recv_connect.cc	/^int main() {$/;"	f
main	tests/recv_reorder.cc	/^int main() {$/;"	f
main	tests/recv_special.cc	/^int main() {$/;"	f
main	tests/recv_transmit.cc	/^int main() {$/;"	f
main	tests/recv_window.cc	/^int main() {$/;"	f
main	tests/send_ack.cc	/^int main() {$/;"	f
main	tests/send_close.cc	/^int main() {$/;"	f
main	tests/send_connect.cc	/^int main() {$/;"	f
main	tests/send_extra.cc	/^int main() {$/;"	f
main	tests/send_retx.cc	/^int main() {$/;"	f
main	tests/send_transmit.cc	/^int main() {$/;"	f
main	tests/send_window.cc	/^int main() {$/;"	f
main	tests/tcp_parser.cc	/^int main(int argc, char **argv) {$/;"	f
main	tests/wrapping_integers_cmp.cc	/^int main() {$/;"	f
main	tests/wrapping_integers_roundtrip.cc	/^int main() {$/;"	f
main	tests/wrapping_integers_unwrap.cc	/^int main() {$/;"	f
main	tests/wrapping_integers_wrap.cc	/^int main() {$/;"	f
make	tests/tcp_expectation_forward.hh	/^    static TCPPropertyViolation make(const std::string &property_name, const T &expected_value, const T &actual_value) {$/;"	f	class:TCPPropertyViolation
make_arp	tests/net_interface.cc	/^ARPMessage make_arp(const uint16_t opcode,$/;"	f
make_datagram	tests/net_interface.cc	/^InternetDatagram make_datagram(const string &src_ip, const string &dst_ip) {$/;"	f
make_frame	tests/net_interface.cc	/^EthernetFrame make_frame(const EthernetAddress &src,$/;"	f
make_hints	libsponge/util/address.cc	/^static inline addrinfo make_hints(const int ai_flags, const int ai_family) {$/;"	f	file:
make_not	tests/tcp_expectation_forward.hh	/^    static TCPPropertyViolation make_not(const std::string &property_name, const T &expected_non_value) {$/;"	f	class:TCPPropertyViolation
make_shared	libsponge/util/buffer.hh	/^    Buffer(std::string &&str) noexcept : _storage(std::make_shared<std::string>(std::move(str))) {}$/;"	f	class:Buffer
ms	tests/tcp_expectation.hh	/^    uint64_t ms;$/;"	m	struct:ExpectLingerTimer
ms_since_last_tick	tests/tcp_expectation.hh	/^    size_t ms_since_last_tick;$/;"	m	struct:Tick
name	tests/sender_harness.hh	/^    std::string name;$/;"	m	class:TCPSenderTestHarness
next_hop	tests/network_interface_test_harness.hh	/^    Address next_hop;$/;"	m	struct:SendDatagram
operator !=	libsponge/util/address.hh	/^    bool operator!=(const Address &other) const { return not operator==(other); }$/;"	f	class:Address
operator ==	libsponge/util/address.cc	/^bool Address::operator==(const Address &other) const {$/;"	f	class:Address
operator Buffer	libsponge/util/buffer.cc	/^BufferList::operator Buffer() const {$/;"	f	class:BufferList
operator const sockaddr *	libsponge/util/address.cc	/^Address::Raw::operator const sockaddr *() const { return reinterpret_cast<const sockaddr *>(&storage); }$/;"	f	class:Address::Raw
operator const sockaddr *	libsponge/util/address.hh	/^    operator const sockaddr *() const { return _address; }$/;"	f	class:Address
operator sockaddr *	libsponge/util/address.cc	/^Address::Raw::operator sockaddr *() { return reinterpret_cast<sockaddr *>(&storage); }$/;"	f	class:Address::Raw
operator std::string	tests/byte_stream_test_harness.cc	/^ByteStreamAction::operator std::string() const { return "     Action: " + description(); }$/;"	f	class:ByteStreamAction
operator std::string	tests/byte_stream_test_harness.cc	/^ByteStreamExpectation::operator std::string() const { return "Expectation: " + description(); }$/;"	f	class:ByteStreamExpectation
operator std::string	tests/byte_stream_test_harness.cc	/^ByteStreamTestStep::operator std::string() const { return "ByteStreamTestStep"; }$/;"	f	class:ByteStreamTestStep
operator std::string	tests/network_interface_test_harness.cc	/^NetworkInterfaceAction::operator std::string() const { return "     Action: " + description(); }$/;"	f	class:NetworkInterfaceAction
operator std::string	tests/network_interface_test_harness.cc	/^NetworkInterfaceExpectation::operator std::string() const { return "Expectation: " + description(); }$/;"	f	class:NetworkInterfaceExpectation
operator std::string	tests/network_interface_test_harness.cc	/^NetworkInterfaceTestStep::operator std::string() const { return "NetworkInterfaceTestStep"; }$/;"	f	class:NetworkInterfaceTestStep
operator std::string	tests/sender_harness.hh	/^    operator std::string() const { return "Action:      " + description(); }$/;"	f	struct:SenderAction
operator std::string	tests/sender_harness.hh	/^    operator std::string() const { return "Expectation: " + description(); }$/;"	f	struct:SenderExpectation
operator std::string	tests/sender_harness.hh	/^    virtual operator std::string() const { return "SenderTestStep"; }$/;"	f	struct:SenderTestStep
operator std::string_view	libsponge/util/buffer.hh	/^    operator std::string_view() const { return str(); }$/;"	f	class:Buffer
other	libsponge/util/file_descriptor.hh	/^        FDWrapper &operator=(FDWrapper &&other) = delete;$/;"	m	class:FileDescriptor::FDWrapper
other	libsponge/util/file_descriptor.hh	/^        FDWrapper &operator=(const FDWrapper &other) = delete;$/;"	m	class:FileDescriptor::FDWrapper
other	libsponge/util/file_descriptor.hh	/^        FDWrapper(FDWrapper &&other) = delete;$/;"	m	class:FileDescriptor::FDWrapper
other	libsponge/util/file_descriptor.hh	/^        FDWrapper(const FDWrapper &other) = delete;$/;"	m	class:FileDescriptor::FDWrapper
other	libsponge/util/file_descriptor.hh	/^    FileDescriptor &operator=(FileDescriptor &&other) = default;      \/\/!< \\brief move assignment is allowed$/;"	m	class:FileDescriptor
other	libsponge/util/file_descriptor.hh	/^    FileDescriptor &operator=(const FileDescriptor &other) = delete;  \/\/!< \\brief copy assignment is forbidden$/;"	m	class:FileDescriptor
other	libsponge/util/file_descriptor.hh	/^    FileDescriptor(FileDescriptor &&other) = default;                 \/\/!< \\brief move construction is allowed$/;"	m	class:FileDescriptor
other	libsponge/util/file_descriptor.hh	/^    FileDescriptor(const FileDescriptor &other) = delete;             \/\/!< \\brief copy construction is forbidden$/;"	m	class:FileDescriptor
out0	doctests/parser_example.cc	/^uint8_t out0, out3;$/;"	v
out1	doctests/parser_example.cc	/^uint32_t out1, out4;$/;"	v
out2	doctests/parser_example.cc	/^uint16_t out2;$/;"	v
out3	doctests/parser_example.cc	/^uint8_t out0, out3;$/;"	v
out4	doctests/parser_example.cc	/^uint32_t out1, out4;$/;"	v
outbound_segments	tests/sender_harness.hh	/^    std::queue<TCPSegment> outbound_segments;$/;"	m	class:TCPSenderTestHarness
override	tests/byte_stream_test_harness.hh	/^    operator std::string() const override;$/;"	m	struct:ByteStreamAction
override	tests/byte_stream_test_harness.hh	/^    operator std::string() const override;$/;"	m	struct:ByteStreamExpectation
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:BufferEmpty
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:BufferSize
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:BytesRead
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:BytesWritten
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:EndInput
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:Eof
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:InputEnded
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:Peek
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:Pop
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:RemainingCapacity
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:Write
override	tests/byte_stream_test_harness.hh	/^    virtual void execute(ByteStream &) const override;$/;"	m	struct:ByteStreamAction
override	tests/byte_stream_test_harness.hh	/^    virtual void execute(ByteStream &) const override;$/;"	m	struct:ByteStreamExpectation
override	tests/byte_stream_test_harness.hh	/^    virtual ~ByteStreamAction() override;$/;"	m	struct:ByteStreamAction
override	tests/byte_stream_test_harness.hh	/^    virtual ~ByteStreamExpectation() override;$/;"	m	struct:ByteStreamExpectation
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:BufferEmpty
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:BufferSize
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:BytesRead
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:BytesWritten
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:EndInput
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:Eof
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:InputEnded
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:Peek
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:Pop
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:RemainingCapacity
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:Write
override	tests/network_interface_test_harness.hh	/^    operator std::string() const override;$/;"	m	struct:NetworkInterfaceAction
override	tests/network_interface_test_harness.hh	/^    operator std::string() const override;$/;"	m	struct:NetworkInterfaceExpectation
override	tests/network_interface_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:ExpectFrame
override	tests/network_interface_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:ExpectNoFrame
override	tests/network_interface_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:ReceiveFrame
override	tests/network_interface_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:SendDatagram
override	tests/network_interface_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:Tick
override	tests/network_interface_test_harness.hh	/^    virtual void execute(NetworkInterface &) const override;$/;"	m	struct:NetworkInterfaceAction
override	tests/network_interface_test_harness.hh	/^    virtual void execute(NetworkInterface &) const override;$/;"	m	struct:NetworkInterfaceExpectation
override	tests/network_interface_test_harness.hh	/^    virtual ~NetworkInterfaceAction() override;$/;"	m	struct:NetworkInterfaceAction
override	tests/network_interface_test_harness.hh	/^    virtual ~NetworkInterfaceExpectation() override;$/;"	m	struct:NetworkInterfaceExpectation
override	tests/network_interface_test_harness.hh	/^    void execute(NetworkInterface &interface) const override;$/;"	m	struct:ExpectFrame
override	tests/network_interface_test_harness.hh	/^    void execute(NetworkInterface &interface) const override;$/;"	m	struct:ExpectNoFrame
override	tests/network_interface_test_harness.hh	/^    void execute(NetworkInterface &interface) const override;$/;"	m	struct:ReceiveFrame
override	tests/network_interface_test_harness.hh	/^    void execute(NetworkInterface &interface) const override;$/;"	m	struct:SendDatagram
override	tests/network_interface_test_harness.hh	/^    void execute(NetworkInterface &interface) const override;$/;"	m	struct:Tick
payload	libsponge/util/socket.hh	/^        std::string payload;     \/\/!< UDP datagram payload$/;"	m	struct:UDPSocket::received_datagram
peek_output	libsponge/byte_stream.cc	/^std::string ByteStream::peek_output(const size_t len) const {$/;"	f	class:ByteStream
peer_address	libsponge/util/socket.cc	/^Address Socket::peer_address() const { return get_address("getpeername", getpeername); }$/;"	f	class:Socket
pop_output	libsponge/byte_stream.cc	/^void ByteStream::pop_output(const size_t len) { $/;"	f	class:ByteStream
port	libsponge/util/address.hh	/^    uint16_t port() const { return ip_port().second; }$/;"	f	class:Address
portnum	doctests/socket_example_1.cc	/^const uint16_t portnum = ((std::random_device()()) % 50000) + 1025;$/;"	v
portnum	doctests/socket_example_2.cc	/^const uint16_t portnum = ((std::random_device()()) % 50000) + 1025;$/;"	v
property	tests/byte_stream_test_harness.cc	/^ByteStreamExpectationViolation ByteStreamExpectationViolation::property(const std::string &property_name,$/;"	f	class:ByteStreamExpectationViolation
property	tests/network_interface_test_harness.cc	/^NetworkInterfaceExpectationViolation NetworkInterfaceExpectationViolation::property(const std::string &property_name,$/;"	f	class:NetworkInterfaceExpectationViolation
push_substring	libsponge/stream_reassembler.cc	/^void StreamReassembler::push_substring(const string &data, const size_t index, const bool eof) {$/;"	f	class:StreamReassembler
random_private_ethernet_address	tests/net_interface.cc	/^EthernetAddress random_private_ethernet_address() {$/;"	f
read	libsponge/byte_stream.cc	/^std::string ByteStream::read(const size_t len) {$/;"	f	class:ByteStream
read	libsponge/util/file_descriptor.cc	/^string FileDescriptor::read(const size_t limit) {$/;"	f	class:FileDescriptor
read	libsponge/util/file_descriptor.cc	/^void FileDescriptor::read(std::string &str, const size_t limit) {$/;"	f	class:FileDescriptor
read	tests/fsm_stream_reassembler_many.cc	/^string read(StreamReassembler &reassembler) {$/;"	f
read	tests/fsm_stream_reassembler_win.cc	/^string read(StreamReassembler &reassembler) {$/;"	f
read	tests/tcp_fsm_test_harness.cc	/^string TestFD::TestRFD::read() {$/;"	f	class:TestFD::TestRFD
read	tests/tcp_fsm_test_harness.hh	/^    std::string read() { return _recv_fd.read(); }  \/\/!< Read from TestFD::_recv_fd$/;"	f	class:TestFD
read_count	libsponge/util/file_descriptor.hh	/^    unsigned int read_count() const { return _internal_fd->_read_count; }$/;"	f	class:FileDescriptor
reassembler	tests/fsm_stream_reassembler_harness.hh	/^    StreamReassembler reassembler;$/;"	m	class:ReassemblerTestHarness
received_datagram	libsponge/util/socket.hh	/^    struct received_datagram {$/;"	s	class:UDPSocket
receiver	tests/receiver_harness.hh	/^    TCPReceiver receiver;$/;"	m	class:TCPReceiverTestHarness
recv	libsponge/util/socket.cc	/^UDPSocket::received_datagram UDPSocket::recv(const size_t mtu) {$/;"	f	class:UDPSocket
recv	libsponge/util/socket.cc	/^void UDPSocket::recv(received_datagram &datagram, const size_t mtu) {$/;"	f	class:UDPSocket
recvd	doctests/socket_example_1.cc	/^auto recvd = sock1.recv();$/;"	v
recvd	doctests/socket_example_2.cc	/^auto recvd = sock2.read();$/;"	v
recvd	doctests/socket_example_3.cc	/^auto recvd = pipe2.read();$/;"	v
recvd2	doctests/socket_example_1.cc	/^auto recvd2 = sock2.recv();$/;"	v
recvd2	doctests/socket_example_2.cc	/^auto recvd2 = sock3.read();$/;"	v
recvd2	doctests/socket_example_3.cc	/^auto recvd2 = pipe1.read();$/;"	v
register_read	libsponge/util/file_descriptor.hh	/^    void register_read() { ++_internal_fd->_read_count; }    \/\/!< increment read count$/;"	f	class:FileDescriptor
register_write	libsponge/util/file_descriptor.hh	/^    void register_write() { ++_internal_fd->_write_count; }  \/\/!< increment write count$/;"	f	class:FileDescriptor
remaining_capacity	libsponge/byte_stream.cc	/^size_t ByteStream::remaining_capacity() const {$/;"	f	class:ByteStream
remove_prefix	libsponge/util/buffer.cc	/^void Buffer::remove_prefix(const size_t n) {$/;"	f	class:Buffer
remove_prefix	libsponge/util/buffer.cc	/^void BufferList::remove_prefix(size_t n) {$/;"	f	class:BufferList
remove_prefix	libsponge/util/buffer.cc	/^void BufferViewList::remove_prefix(size_t n) {$/;"	f	class:BufferViewList
remove_prefix	libsponge/util/parser.cc	/^void NetParser::remove_prefix(const size_t n) {$/;"	f	class:NetParser
result_name	tests/receiver_harness.hh	/^    static std::string result_name(Result res) {$/;"	f	struct:SegmentArrives
segment_description	tests/sender_harness.hh	/^    std::string segment_description() const {$/;"	f	struct:ExpectSegment
segment_description	tests/tcp_expectation.hh	/^    std::string segment_description() const {$/;"	f	struct:ExpectSegment
send	libsponge/util/socket.cc	/^void UDPSocket::send(const BufferViewList &payload) {$/;"	f	class:UDPSocket
send_ack	tests/tcp_fsm_test_harness.cc	/^void TCPTestHarness::send_ack(const WrappingInt32 seqno, const WrappingInt32 ackno, const optional<uint16_t> swin) {$/;"	f	class:TCPTestHarness
send_byte	tests/tcp_fsm_test_harness.cc	/^void TCPTestHarness::send_byte(const WrappingInt32 seqno, const optional<WrappingInt32> ackno, const uint8_t val) {$/;"	f	class:TCPTestHarness
send_data	tests/tcp_fsm_test_harness.cc	/^void TCPTestHarness::send_data(const WrappingInt32 seqno, const WrappingInt32 ackno, VecIterT begin, VecIterT end) {$/;"	f	class:TCPTestHarness
send_fin	tests/tcp_fsm_test_harness.cc	/^void TCPTestHarness::send_fin(const WrappingInt32 seqno, const optional<WrappingInt32> ackno) {$/;"	f	class:TCPTestHarness
send_rst	tests/tcp_fsm_test_harness.cc	/^void TCPTestHarness::send_rst(const WrappingInt32 seqno, const optional<WrappingInt32> ackno) {$/;"	f	class:TCPTestHarness
send_syn	tests/tcp_fsm_test_harness.cc	/^void TCPTestHarness::send_syn(const WrappingInt32 seqno, const optional<WrappingInt32> ackno) {$/;"	f	class:TCPTestHarness
sender	tests/sender_harness.hh	/^    TCPSender sender;$/;"	m	class:TCPSenderTestHarness
sendmsg_helper	libsponge/util/socket.cc	/^void sendmsg_helper(const int fd_num,$/;"	f
sendto	libsponge/util/socket.cc	/^void UDPSocket::sendto(const Address &destination, const BufferViewList &payload) {$/;"	f	class:UDPSocket
service_count	libsponge/util/eventloop.cc	/^unsigned int EventLoop::Rule::service_count() const {$/;"	f	class:EventLoop::Rule
set_blocking	libsponge/util/file_descriptor.cc	/^void FileDescriptor::set_blocking(const bool blocking_state) {$/;"	f	class:FileDescriptor
set_error	libsponge/byte_stream.hh	/^    void set_error() { _error = true; }$/;"	f	class:ByteStream
set_error	libsponge/util/parser.hh	/^    void set_error(ParseResult res) { _error = res; }$/;"	f	class:NetParser
set_reuseaddr	libsponge/util/socket.cc	/^void Socket::set_reuseaddr() { setsockopt(SOL_SOCKET, SO_REUSEADDR, int(true)); }$/;"	f	class:Socket
setsockopt	libsponge/util/socket.cc	/^void Socket::setsockopt(const int level, const int option, const option_type &option_value) {$/;"	f	class:Socket
show_ethernet_frame	tests/test_utils.hh	/^inline void show_ethernet_frame(const uint8_t *pkt, const struct pcap_pkthdr &hdr) {$/;"	f
shutdown	libsponge/util/socket.cc	/^void Socket::shutdown(const int how) {$/;"	f	class:Socket
size	libsponge/util/address.hh	/^    socklen_t size() const { return _size; }$/;"	f	class:Address
size	libsponge/util/buffer.cc	/^size_t BufferList::size() const {$/;"	f	class:BufferList
size	libsponge/util/buffer.cc	/^size_t BufferViewList::size() const {$/;"	f	class:BufferViewList
size	libsponge/util/buffer.hh	/^    size_t size() const { return str().size(); }$/;"	f	class:Buffer
sock1	doctests/socket_example_1.cc	/^UDPSocket sock1;$/;"	v
sock1	doctests/socket_example_2.cc	/^TCPSocket sock1;$/;"	v
sock2	doctests/socket_example_1.cc	/^UDPSocket sock2;$/;"	v
sock2	doctests/socket_example_2.cc	/^TCPSocket sock2;$/;"	v
sock3	doctests/socket_example_2.cc	/^auto sock3 = sock1.accept();$/;"	v
source_address	libsponge/util/socket.hh	/^        Address source_address;  \/\/!< Address from which this datagram was received$/;"	m	struct:UDPSocket::received_datagram
sponge_conversions	tests/string_conversions.hh	/^namespace sponge_conversions {$/;"	n
state	tests/tcp_expectation.hh	/^    TCPState state;$/;"	m	struct:ExpectNotInState
state	tests/tcp_expectation.hh	/^    TCPState state;$/;"	m	struct:ExpectState
steps_executed	tests/fsm_stream_reassembler_harness.hh	/^    std::vector<std::string> steps_executed;$/;"	m	class:ReassemblerTestHarness
steps_executed	tests/receiver_harness.hh	/^    std::vector<std::string> steps_executed;$/;"	m	class:TCPReceiverTestHarness
steps_executed	tests/sender_harness.hh	/^    std::vector<std::string> steps_executed;$/;"	m	class:TCPSenderTestHarness
str	libsponge/util/buffer.hh	/^    std::string_view str() const {$/;"	f	class:Buffer
stream_out	libsponge/stream_reassembler.hh	/^    ByteStream &stream_out() { return _output; }$/;"	f	class:StreamReassembler
stream_out	libsponge/stream_reassembler.hh	/^    const ByteStream &stream_out() const { return _output; }$/;"	f	class:StreamReassembler
submit_a	tests/send_equivalence_checker.cc	/^void SendEquivalenceChecker::submit_a(TCPSegment &seg) {$/;"	f	class:SendEquivalenceChecker
submit_b	tests/send_equivalence_checker.cc	/^void SendEquivalenceChecker::submit_b(TCPSegment &seg) {$/;"	f	class:SendEquivalenceChecker
summary	tests/network_interface_test_harness.cc	/^string summary(const EthernetFrame &frame) {$/;"	f
tagged_error	libsponge/util/util.hh	/^    tagged_error(const std::error_category &category, const std::string &attempt, const int error_code)$/;"	f	class:tagged_error
tagged_error	libsponge/util/util.hh	/^class tagged_error : public std::system_error {$/;"	c
test_err_if	tests/test_err_if.hh	/^#define test_err_if(/;"	d
test_should_be	tests/test_should_be.hh	/^#define test_should_be(/;"	d
timestamp_ms	libsponge/util/util.cc	/^uint64_t timestamp_ms() {$/;"	f
to_string	libsponge/util/address.cc	/^string Address::to_string() const {$/;"	f	class:Address
to_string	tests/fsm_stream_reassembler_harness.hh	/^    std::string to_string() const { return "Action:      " + description(); }$/;"	f	struct:ReassemblerAction
to_string	tests/fsm_stream_reassembler_harness.hh	/^    std::string to_string() const { return "Expectation: " + description(); }$/;"	f	struct:ReassemblerExpectation
to_string	tests/fsm_stream_reassembler_harness.hh	/^    virtual std::string to_string() const { return "ReassemblerTestStep"; }$/;"	f	struct:ReassemblerTestStep
to_string	tests/receiver_harness.hh	/^    std::string to_string() const { return "Action:      " + description(); }$/;"	f	struct:ReceiverAction
to_string	tests/receiver_harness.hh	/^    std::string to_string() const { return "Expectation: " + description(); }$/;"	f	struct:ReceiverExpectation
to_string	tests/receiver_harness.hh	/^    virtual std::string to_string() const { return "ReceiverTestStep"; }$/;"	f	struct:ReceiverTestStep
to_string	tests/string_conversions.hh	/^std::string to_string(T &&t) {$/;"	f
to_string	tests/string_conversions.hh	/^std::string to_string(WrappingInt32 i) { return std::to_string(i.raw_value()); }$/;"	f	namespace:sponge_conversions
to_string	tests/string_conversions.hh	/^std::string to_string(const std::optional<T> &v) {$/;"	f	namespace:sponge_conversions
to_string	tests/tcp_expectation.hh	/^    std::string to_string() const { return "Action:      " + description(); }$/;"	f	struct:TCPAction
to_string	tests/tcp_expectation.hh	/^    std::string to_string() const { return "Expectation: " + description(); }$/;"	f	struct:TCPExpectation
to_string	tests/tcp_expectation_forward.hh	/^    virtual std::string to_string() const { return "TestStep"; }$/;"	f	struct:TCPTestStep
u16	libsponge/util/parser.cc	/^uint16_t NetParser::u16() { return _parse_int<uint16_t>(); }$/;"	f	class:NetParser
u16	libsponge/util/parser.cc	/^void NetUnparser::u16(string &s, const uint16_t val) { return _unparse_int<uint16_t>(s, val); }$/;"	f	class:NetUnparser
u32	libsponge/util/parser.cc	/^uint32_t NetParser::u32() { return _parse_int<uint32_t>(); }$/;"	f	class:NetParser
u32	libsponge/util/parser.cc	/^void NetUnparser::u32(string &s, const uint32_t val) { return _unparse_int<uint32_t>(s, val); }$/;"	f	class:NetUnparser
u8	libsponge/util/parser.cc	/^uint8_t NetParser::u8() { return _parse_int<uint8_t>(); }$/;"	f	class:NetParser
u8	libsponge/util/parser.cc	/^void NetUnparser::u8(string &s, const uint8_t val) { return _unparse_int<uint8_t>(s, val); }$/;"	f	class:NetUnparser
unassembled_bytes	libsponge/stream_reassembler.cc	/^size_t StreamReassembler::unassembled_bytes() const { return {}; }$/;"	f	class:StreamReassembler
unix_error	libsponge/util/util.hh	/^    explicit unix_error(const std::string &attempt, const int error = errno)$/;"	f	class:unix_error
unix_error	libsponge/util/util.hh	/^class unix_error : public tagged_error {$/;"	c
val1	doctests/parser_example.cc	/^const uint32_t val1 = 0xdeadbeef;$/;"	v
val2	doctests/parser_example.cc	/^const uint16_t val2 = 0xc0c0;$/;"	v
val3	doctests/parser_example.cc	/^const uint8_t val3 = 0xff;$/;"	v
val4	doctests/parser_example.cc	/^const uint32_t val4 = 0x0c05fefe;$/;"	v
value	libsponge/util/util.cc	/^uint16_t InternetChecksum::value() const {$/;"	f	class:InternetChecksum
violated_field	tests/sender_harness.hh	/^    static SegmentExpectationViolation violated_field(const std::string &field_name,$/;"	f	class:SegmentExpectationViolation
violated_field	tests/tcp_expectation_forward.hh	/^    static SegmentExpectationViolation violated_field(const std::string &field_name,$/;"	f	class:SegmentExpectationViolation
violated_verb	tests/sender_harness.hh	/^    static SegmentExpectationViolation violated_verb(const std::string &msg) {$/;"	f	class:SegmentExpectationViolation
violated_verb	tests/tcp_expectation_forward.hh	/^    static SegmentExpectationViolation violated_verb(const std::string &msg) {$/;"	f	class:SegmentExpectationViolation
wait_next_event	libsponge/util/eventloop.cc	/^EventLoop::Result EventLoop::wait_next_event(const int timeout_ms) {$/;"	f	class:EventLoop
with_ack	tests/receiver_harness.hh	/^    SegmentArrives &with_ack(WrappingInt32 ackno_) {$/;"	f	struct:SegmentArrives
with_ack	tests/receiver_harness.hh	/^    SegmentArrives &with_ack(uint32_t ackno_) { return with_ack(WrappingInt32{ackno_}); }$/;"	f	struct:SegmentArrives
with_ack	tests/sender_harness.hh	/^    ExpectSegment &with_ack(bool ack_) {$/;"	f	struct:ExpectSegment
with_ack	tests/tcp_expectation.hh	/^    ExpectSegment &with_ack(bool ack_) {$/;"	f	struct:ExpectSegment
with_ack	tests/tcp_expectation.hh	/^    SendSegment &with_ack(bool ack_) {$/;"	f	struct:SendSegment
with_ackno	tests/sender_harness.hh	/^    ExpectSegment &with_ackno(WrappingInt32 ackno_) {$/;"	f	struct:ExpectSegment
with_ackno	tests/sender_harness.hh	/^    ExpectSegment &with_ackno(uint32_t ackno_) { return with_ackno(WrappingInt32{ackno_}); }$/;"	f	struct:ExpectSegment
with_ackno	tests/tcp_expectation.hh	/^    ExpectSegment &with_ackno(WrappingInt32 ackno_) {$/;"	f	struct:ExpectSegment
with_ackno	tests/tcp_expectation.hh	/^    ExpectSegment &with_ackno(uint32_t ackno_) { return with_ackno(WrappingInt32{ackno_}); }$/;"	f	struct:ExpectSegment
with_ackno	tests/tcp_expectation.hh	/^    SendSegment &with_ackno(WrappingInt32 ackno_) {$/;"	f	struct:SendSegment
with_ackno	tests/tcp_expectation.hh	/^    SendSegment &with_ackno(uint32_t ackno_) { return with_ackno(WrappingInt32{ackno_}); }$/;"	f	struct:SendSegment
with_bytes_written	tests/byte_stream_test_harness.cc	/^Write &Write::with_bytes_written(const size_t bytes_written) {$/;"	f	class:Write
with_bytes_written	tests/tcp_expectation.hh	/^    TCPAction &with_bytes_written(size_t bytes_written) {$/;"	f	struct:Write
with_data	tests/receiver_harness.hh	/^    SegmentArrives &with_data(std::string data_) {$/;"	f	struct:SegmentArrives
with_data	tests/sender_harness.hh	/^    ExpectSegment &with_data(std::string data_) {$/;"	f	struct:ExpectSegment
with_data	tests/tcp_expectation.hh	/^    ExpectData &with_data(const std::string &data_) {$/;"	f	struct:ExpectData
with_data	tests/tcp_expectation.hh	/^    ExpectSegment &with_data(std::string data_) {$/;"	f	struct:ExpectSegment
with_data	tests/tcp_expectation.hh	/^    SendSegment &with_data(std::string &&data_) {$/;"	f	struct:SendSegment
with_end_input	tests/sender_harness.hh	/^    WriteBytes &with_end_input(const bool end_input) {$/;"	f	struct:WriteBytes
with_eof	tests/fsm_stream_reassembler_harness.hh	/^    SubmitSegment &with_eof(bool eof) {$/;"	f	struct:SubmitSegment
with_fin	tests/receiver_harness.hh	/^    SegmentArrives &with_fin() {$/;"	f	struct:SegmentArrives
with_fin	tests/sender_harness.hh	/^    ExpectSegment &with_fin(bool fin_) {$/;"	f	struct:ExpectSegment
with_fin	tests/tcp_expectation.hh	/^    ExpectSegment &with_fin(bool fin_) {$/;"	f	struct:ExpectSegment
with_fin	tests/tcp_expectation.hh	/^    SendSegment &with_fin(bool fin_) {$/;"	f	struct:SendSegment
with_max_retx_exceeded	tests/sender_harness.hh	/^    Tick &with_max_retx_exceeded(bool max_retx_exceeded_) {$/;"	f	struct:Tick
with_no_flags	tests/sender_harness.hh	/^    ExpectSegment &with_no_flags() {$/;"	f	struct:ExpectSegment
with_no_flags	tests/tcp_expectation.hh	/^    ExpectSegment &with_no_flags() {$/;"	f	struct:ExpectSegment
with_payload_size	tests/sender_harness.hh	/^    ExpectSegment &with_payload_size(size_t payload_size_) {$/;"	f	struct:ExpectSegment
with_payload_size	tests/tcp_expectation.hh	/^    ExpectSegment &with_payload_size(size_t payload_size_) {$/;"	f	struct:ExpectSegment
with_payload_size	tests/tcp_expectation.hh	/^    SendSegment &with_payload_size(size_t payload_size_) {$/;"	f	struct:SendSegment
with_result	tests/receiver_harness.hh	/^    SegmentArrives &with_result(Result result_) {$/;"	f	struct:SegmentArrives
with_rst	tests/receiver_harness.hh	/^    SegmentArrives &with_rst() {$/;"	f	struct:SegmentArrives
with_rst	tests/sender_harness.hh	/^    ExpectSegment &with_rst(bool rst_) {$/;"	f	struct:ExpectSegment
with_rst	tests/tcp_expectation.hh	/^    ExpectSegment &with_rst(bool rst_) {$/;"	f	struct:ExpectSegment
with_rst	tests/tcp_expectation.hh	/^    SendSegment &with_rst(bool rst_) {$/;"	f	struct:SendSegment
with_seqno	tests/receiver_harness.hh	/^    SegmentArrives &with_seqno(WrappingInt32 seqno_) {$/;"	f	struct:SegmentArrives
with_seqno	tests/receiver_harness.hh	/^    SegmentArrives &with_seqno(uint32_t seqno_) { return with_seqno(WrappingInt32{seqno_}); }$/;"	f	struct:SegmentArrives
with_seqno	tests/sender_harness.hh	/^    ExpectSegment &with_seqno(WrappingInt32 seqno_) {$/;"	f	struct:ExpectSegment
with_seqno	tests/sender_harness.hh	/^    ExpectSegment &with_seqno(uint32_t seqno_) { return with_seqno(WrappingInt32{seqno_}); }$/;"	f	struct:ExpectSegment
with_seqno	tests/tcp_expectation.hh	/^    ExpectSegment &with_seqno(WrappingInt32 seqno_) {$/;"	f	struct:ExpectSegment
with_seqno	tests/tcp_expectation.hh	/^    ExpectSegment &with_seqno(uint32_t seqno_) { return with_seqno(WrappingInt32{seqno_}); }$/;"	f	struct:ExpectSegment
with_seqno	tests/tcp_expectation.hh	/^    SendSegment &with_seqno(WrappingInt32 seqno_) {$/;"	f	struct:SendSegment
with_seqno	tests/tcp_expectation.hh	/^    SendSegment &with_seqno(uint32_t seqno_) { return with_seqno(WrappingInt32{seqno_}); }$/;"	f	struct:SendSegment
with_syn	tests/receiver_harness.hh	/^    SegmentArrives &with_syn() {$/;"	f	struct:SegmentArrives
with_syn	tests/sender_harness.hh	/^    ExpectSegment &with_syn(bool syn_) {$/;"	f	struct:ExpectSegment
with_syn	tests/tcp_expectation.hh	/^    ExpectSegment &with_syn(bool syn_) {$/;"	f	struct:ExpectSegment
with_syn	tests/tcp_expectation.hh	/^    SendSegment &with_syn(bool syn_) {$/;"	f	struct:SendSegment
with_win	tests/receiver_harness.hh	/^    SegmentArrives &with_win(uint16_t win_) {$/;"	f	struct:SegmentArrives
with_win	tests/sender_harness.hh	/^    AckReceived &with_win(uint16_t win) {$/;"	f	struct:AckReceived
with_win	tests/sender_harness.hh	/^    ExpectSegment &with_win(uint16_t win_) {$/;"	f	struct:ExpectSegment
with_win	tests/tcp_expectation.hh	/^    ExpectSegment &with_win(uint16_t win_) {$/;"	f	struct:ExpectSegment
with_win	tests/tcp_expectation.hh	/^    SendSegment &with_win(uint16_t win_) {$/;"	f	struct:SendSegment
wrapping_gt	tests/fsm_reorder.cc	/^bool wrapping_gt(WrappingInt32 a, WrappingInt32 b) { return wrapping_lt(b, a); }$/;"	f
wrapping_lt	tests/fsm_reorder.cc	/^bool wrapping_lt(WrappingInt32 a, WrappingInt32 b) { return static_cast<int32_t>(b.raw_value() - a.raw_value()) > 0; }$/;"	f
write	libsponge/byte_stream.cc	/^size_t ByteStream::write(const string &data) {$/;"	f	class:ByteStream
write	libsponge/util/file_descriptor.cc	/^size_t FileDescriptor::write(BufferViewList buffer, const bool write_all) {$/;"	f	class:FileDescriptor
write	libsponge/util/file_descriptor.hh	/^    size_t write(const char *str, const bool write_all = true) { return write(BufferViewList(str), write_all); }$/;"	f	class:FileDescriptor
write	libsponge/util/file_descriptor.hh	/^    size_t write(const std::string &str, const bool write_all = true) { return write(BufferViewList(str), write_all); }$/;"	f	class:FileDescriptor
write	tests/tcp_fsm_test_harness.cc	/^void TestFD::write(const BufferViewList &buffer) {$/;"	f	class:TestFD
write	tests/tcp_fsm_test_harness.cc	/^void TestFdAdapter::write(TCPSegment &seg) {$/;"	f	class:TestFdAdapter
write_count	libsponge/util/file_descriptor.hh	/^    unsigned int write_count() const { return _internal_fd->_write_count; }$/;"	f	class:FileDescriptor
~ByteStreamAction	tests/byte_stream_test_harness.cc	/^ByteStreamAction::~ByteStreamAction() {}$/;"	f	class:ByteStreamAction
~ByteStreamExpectation	tests/byte_stream_test_harness.cc	/^ByteStreamExpectation::~ByteStreamExpectation() {}$/;"	f	class:ByteStreamExpectation
~ByteStreamTestStep	tests/byte_stream_test_harness.cc	/^ByteStreamTestStep::~ByteStreamTestStep() {}$/;"	f	class:ByteStreamTestStep
~FDWrapper	libsponge/util/file_descriptor.cc	/^FileDescriptor::FDWrapper::~FDWrapper() {$/;"	f	class:FileDescriptor::FDWrapper
~NetworkInterfaceAction	tests/network_interface_test_harness.cc	/^NetworkInterfaceAction::~NetworkInterfaceAction() {}$/;"	f	class:NetworkInterfaceAction
~NetworkInterfaceExpectation	tests/network_interface_test_harness.cc	/^NetworkInterfaceExpectation::~NetworkInterfaceExpectation() {}$/;"	f	class:NetworkInterfaceExpectation
~NetworkInterfaceTestStep	tests/network_interface_test_harness.cc	/^NetworkInterfaceTestStep::~NetworkInterfaceTestStep() {}$/;"	f	class:NetworkInterfaceTestStep
~ReassemblerAction	tests/fsm_stream_reassembler_harness.hh	/^    virtual ~ReassemblerAction() {}$/;"	f	struct:ReassemblerAction
~ReassemblerExpectation	tests/fsm_stream_reassembler_harness.hh	/^    virtual ~ReassemblerExpectation() {}$/;"	f	struct:ReassemblerExpectation
~ReassemblerTestStep	tests/fsm_stream_reassembler_harness.hh	/^    virtual ~ReassemblerTestStep() {}$/;"	f	struct:ReassemblerTestStep
~ReceiverAction	tests/receiver_harness.hh	/^    virtual ~ReceiverAction() {}$/;"	f	struct:ReceiverAction
~ReceiverExpectation	tests/receiver_harness.hh	/^    virtual ~ReceiverExpectation() {}$/;"	f	struct:ReceiverExpectation
~ReceiverTestStep	tests/receiver_harness.hh	/^    virtual ~ReceiverTestStep() {}$/;"	f	struct:ReceiverTestStep
~SenderAction	tests/sender_harness.hh	/^    virtual ~SenderAction() {}$/;"	f	struct:SenderAction
~SenderExpectation	tests/sender_harness.hh	/^    virtual ~SenderExpectation() {}$/;"	f	struct:SenderExpectation
~SenderTestStep	tests/sender_harness.hh	/^    virtual ~SenderTestStep() {}$/;"	f	struct:SenderTestStep
~TCPAction	tests/tcp_expectation.hh	/^    virtual ~TCPAction() {}$/;"	f	struct:TCPAction
~TCPExpectation	tests/tcp_expectation.hh	/^    virtual ~TCPExpectation() {}$/;"	f	struct:TCPExpectation
~TCPTestStep	tests/tcp_expectation_forward.hh	/^    virtual ~TCPTestStep() {}$/;"	f	struct:TCPTestStep
