!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Address	libsponge/util/address.cc	/^Address::Address(const sockaddr *addr, const size_t size) : _size(size) {$/;"	f	class:Address
Address	libsponge/util/address.cc	/^Address::Address(const string &hostname, const string &service)$/;"	f	class:Address
Address	libsponge/util/address.cc	/^Address::Address(const string &ip, const uint16_t port)$/;"	f	class:Address
Address	libsponge/util/address.cc	/^Address::Address(const string &node, const string &service, const addrinfo &hints) : _size() {$/;"	f	class:Address
Address	libsponge/util/address.hh	/^class Address {$/;"	c
BadChecksum	libsponge/util/parser.hh	/^    BadChecksum,      \/\/!< Bad checksum$/;"	m	class:ParseResult
Buffer	libsponge/util/buffer.hh	/^class Buffer {$/;"	c
BufferEmpty	tests/byte_stream_test_harness.cc	/^BufferEmpty::BufferEmpty(const bool buffer_empty) : _buffer_empty(buffer_empty) {}$/;"	f	class:BufferEmpty
BufferEmpty	tests/byte_stream_test_harness.hh	/^struct BufferEmpty : public ByteStreamExpectation {$/;"	s
BufferList	libsponge/util/buffer.hh	/^    BufferList(Buffer buffer) : _buffers{buffer} {}$/;"	f	class:BufferList
BufferList	libsponge/util/buffer.hh	/^class BufferList {$/;"	c
BufferSize	tests/byte_stream_test_harness.cc	/^BufferSize::BufferSize(const size_t buffer_size) : _buffer_size(buffer_size) {}$/;"	f	class:BufferSize
BufferSize	tests/byte_stream_test_harness.hh	/^struct BufferSize : public ByteStreamExpectation {$/;"	s
BufferViewList	libsponge/util/buffer.cc	/^BufferViewList::BufferViewList(const BufferList &buffers) {$/;"	f	class:BufferViewList
BufferViewList	libsponge/util/buffer.hh	/^    BufferViewList(const char *s) : BufferViewList(std::string_view(s)) {}$/;"	f	class:BufferViewList
BufferViewList	libsponge/util/buffer.hh	/^    BufferViewList(const std::string &str) : BufferViewList(std::string_view(str)) {}$/;"	f	class:BufferViewList
BufferViewList	libsponge/util/buffer.hh	/^    BufferViewList(std::string_view str) { _views.push_back({const_cast<char *>(str.data()), str.size()}); }$/;"	f	class:BufferViewList
BufferViewList	libsponge/util/buffer.hh	/^class BufferViewList {$/;"	c
ByteStream	libsponge/byte_stream.cc	/^ByteStream::ByteStream(const size_t capacity) { DUMMY_CODE(capacity); }$/;"	f	class:ByteStream
ByteStream	libsponge/byte_stream.hh	/^class ByteStream {$/;"	c
ByteStreamAction	tests/byte_stream_test_harness.hh	/^struct ByteStreamAction : public ByteStreamTestStep {$/;"	s
ByteStreamExpectation	tests/byte_stream_test_harness.hh	/^struct ByteStreamExpectation : public ByteStreamTestStep {$/;"	s
ByteStreamExpectationViolation	tests/byte_stream_test_harness.cc	/^ByteStreamExpectationViolation::ByteStreamExpectationViolation(const std::string &msg) : std::runtime_error(msg) {}$/;"	f	class:ByteStreamExpectationViolation
ByteStreamExpectationViolation	tests/byte_stream_test_harness.hh	/^class ByteStreamExpectationViolation : public std::runtime_error {$/;"	c
ByteStreamTestHarness	tests/byte_stream_test_harness.cc	/^ByteStreamTestHarness::ByteStreamTestHarness(const std::string &test_name, const size_t capacity)$/;"	f	class:ByteStreamTestHarness
ByteStreamTestHarness	tests/byte_stream_test_harness.hh	/^class ByteStreamTestHarness {$/;"	c
ByteStreamTestStep	tests/byte_stream_test_harness.hh	/^struct ByteStreamTestStep {$/;"	s
BytesRead	tests/byte_stream_test_harness.cc	/^BytesRead::BytesRead(const size_t bytes_read) : _bytes_read(bytes_read) {}$/;"	f	class:BytesRead
BytesRead	tests/byte_stream_test_harness.hh	/^struct BytesRead : public ByteStreamExpectation {$/;"	s
BytesWritten	tests/byte_stream_test_harness.cc	/^BytesWritten::BytesWritten(const size_t bytes_written) : _bytes_written(bytes_written) {}$/;"	f	class:BytesWritten
BytesWritten	tests/byte_stream_test_harness.hh	/^struct BytesWritten : public ByteStreamExpectation {$/;"	s
CLONEDEV	libsponge/util/tun.cc	/^static constexpr const char *CLONEDEV = "\/dev\/net\/tun";$/;"	v	file:
DUMMY_CODE	libsponge/byte_stream.cc	/^void DUMMY_CODE(Targs &&... \/* unused *\/) {}$/;"	f
Direction	libsponge/util/eventloop.hh	/^    enum class Direction : short {$/;"	c	class:EventLoop
EndInput	tests/byte_stream_test_harness.hh	/^struct EndInput : public ByteStreamAction {$/;"	s
Eof	tests/byte_stream_test_harness.cc	/^Eof::Eof(const bool eof) : _eof(eof) {}$/;"	f	class:Eof
Eof	tests/byte_stream_test_harness.hh	/^struct Eof : public ByteStreamExpectation {$/;"	s
EventLoop	libsponge/util/eventloop.hh	/^class EventLoop {$/;"	c
FDWrapper	libsponge/util/file_descriptor.cc	/^FileDescriptor::FDWrapper::FDWrapper(const int fd) : _fd(fd) {$/;"	f	class:FileDescriptor::FDWrapper
FDWrapper	libsponge/util/file_descriptor.hh	/^    class FDWrapper {$/;"	c	class:FileDescriptor
FileDescriptor	libsponge/util/file_descriptor.cc	/^FileDescriptor::FileDescriptor(const int fd) : _internal_fd(make_shared<FDWrapper>(fd)) {}$/;"	f	class:FileDescriptor
FileDescriptor	libsponge/util/file_descriptor.cc	/^FileDescriptor::FileDescriptor(shared_ptr<FDWrapper> other_shared_ptr) : _internal_fd(move(other_shared_ptr)) {}$/;"	f	class:FileDescriptor
FileDescriptor	libsponge/util/file_descriptor.hh	/^class FileDescriptor {$/;"	c
HeaderTooShort	libsponge/util/parser.hh	/^    HeaderTooShort,   \/\/!< Header length is shorter than minimum required$/;"	m	class:ParseResult
In	libsponge/util/eventloop.hh	/^        In = POLLIN,   \/\/!< Callback will be triggered when Rule::fd is readable.$/;"	m	class:EventLoop::Direction
InputEnded	tests/byte_stream_test_harness.cc	/^InputEnded::InputEnded(const bool input_ended) : _input_ended(input_ended) {}$/;"	f	class:InputEnded
InputEnded	tests/byte_stream_test_harness.hh	/^struct InputEnded : public ByteStreamExpectation {$/;"	s
InternetChecksum	libsponge/util/util.cc	/^InternetChecksum::InternetChecksum(const uint32_t initial_sum) : _sum(initial_sum) {}$/;"	f	class:InternetChecksum
InternetChecksum	libsponge/util/util.hh	/^class InternetChecksum {$/;"	c
LocalStreamSocket	libsponge/util/socket.hh	/^    explicit LocalStreamSocket(FileDescriptor &&fd) : Socket(std::move(fd), AF_UNIX, SOCK_STREAM) {}$/;"	f	class:LocalStreamSocket
LocalStreamSocket	libsponge/util/socket.hh	/^class LocalStreamSocket : public Socket {$/;"	c
NetParser	libsponge/util/parser.hh	/^    NetParser(Buffer buffer) : _buffer(buffer) {}$/;"	f	class:NetParser
NetParser	libsponge/util/parser.hh	/^class NetParser {$/;"	c
NetUnparser	libsponge/util/parser.hh	/^struct NetUnparser {$/;"	s
NoError	libsponge/util/parser.hh	/^    NoError = 0,      \/\/!< Success$/;"	m	class:ParseResult
Out	libsponge/util/eventloop.hh	/^        Out = POLLOUT  \/\/!< Callback will be triggered when Rule::fd is writable.$/;"	m	class:EventLoop::Direction
PacketTooShort	libsponge/util/parser.hh	/^    PacketTooShort,   \/\/!< Not enough data to finish parsing$/;"	m	class:ParseResult
ParseResult	libsponge/util/parser.hh	/^enum class ParseResult {$/;"	c
Peek	tests/byte_stream_test_harness.cc	/^Peek::Peek(const std::string &output) : _output(output) {}$/;"	f	class:Peek
Peek	tests/byte_stream_test_harness.hh	/^struct Peek : public ByteStreamExpectation {$/;"	s
Pop	tests/byte_stream_test_harness.cc	/^Pop::Pop(const size_t len) : _len(len) {}$/;"	f	class:Pop
Pop	tests/byte_stream_test_harness.hh	/^struct Pop : public ByteStreamAction {$/;"	s
Raw	libsponge/util/address.hh	/^    class Raw {$/;"	c	class:Address
RemainingCapacity	tests/byte_stream_test_harness.cc	/^RemainingCapacity::RemainingCapacity(const size_t remaining_capacity) : _remaining_capacity(remaining_capacity) {}$/;"	f	class:RemainingCapacity
RemainingCapacity	tests/byte_stream_test_harness.hh	/^struct RemainingCapacity : public ByteStreamExpectation {$/;"	s
Result	libsponge/util/eventloop.hh	/^    enum class Result {$/;"	c	class:EventLoop::Direction
Rule	libsponge/util/eventloop.hh	/^    class Rule {$/;"	c	class:EventLoop::Direction
SPONGE_BYTE_STREAM_HARNESS_HH	tests/byte_stream_test_harness.hh	/^#define SPONGE_BYTE_STREAM_HARNESS_HH$/;"	d
SPONGE_LIBSPONGE_ADDRESS_HH	libsponge/util/address.hh	/^#define SPONGE_LIBSPONGE_ADDRESS_HH$/;"	d
SPONGE_LIBSPONGE_BUFFER_HH	libsponge/util/buffer.hh	/^#define SPONGE_LIBSPONGE_BUFFER_HH$/;"	d
SPONGE_LIBSPONGE_BYTE_STREAM_HH	libsponge/byte_stream.hh	/^#define SPONGE_LIBSPONGE_BYTE_STREAM_HH$/;"	d
SPONGE_LIBSPONGE_EVENTLOOP_HH	libsponge/util/eventloop.hh	/^#define SPONGE_LIBSPONGE_EVENTLOOP_HH$/;"	d
SPONGE_LIBSPONGE_FILE_DESCRIPTOR_HH	libsponge/util/file_descriptor.hh	/^#define SPONGE_LIBSPONGE_FILE_DESCRIPTOR_HH$/;"	d
SPONGE_LIBSPONGE_PARSER_HH	libsponge/util/parser.hh	/^#define SPONGE_LIBSPONGE_PARSER_HH$/;"	d
SPONGE_LIBSPONGE_SOCKET_HH	libsponge/util/socket.hh	/^#define SPONGE_LIBSPONGE_SOCKET_HH$/;"	d
SPONGE_LIBSPONGE_TUN_HH	libsponge/util/tun.hh	/^#define SPONGE_LIBSPONGE_TUN_HH$/;"	d
SPONGE_LIBSPONGE_UTIL_HH	libsponge/util/util.hh	/^#define SPONGE_LIBSPONGE_UTIL_HH$/;"	d
SPONGE_TESTS_TEST_ERR_IF_HH	tests/test_err_if.hh	/^#define SPONGE_TESTS_TEST_ERR_IF_HH$/;"	d
SPONGE_TESTS_TEST_SHOULD_BE_HH	tests/test_should_be.hh	/^#define SPONGE_TESTS_TEST_SHOULD_BE_HH$/;"	d
Socket	libsponge/util/socket.cc	/^Socket::Socket(FileDescriptor &&fd, const int domain, const int type) : FileDescriptor(move(fd)) {$/;"	f	class:Socket
Socket	libsponge/util/socket.cc	/^Socket::Socket(const int domain, const int type) : FileDescriptor(SystemCall("socket", socket(domain, type, 0))) {}$/;"	f	class:Socket
Socket	libsponge/util/socket.hh	/^class Socket : public FileDescriptor {$/;"	c
Success	libsponge/util/eventloop.hh	/^        Success,  \/\/!< At least one Rule was triggered.$/;"	m	class:EventLoop::Direction::Result
SystemCall	libsponge/util/util.cc	/^int SystemCall(const char *attempt, const int return_value, const int errno_mask) {$/;"	f
SystemCall	libsponge/util/util.cc	/^int SystemCall(const string &attempt, const int return_value, const int errno_mask) {$/;"	f
TCPSocket	libsponge/util/socket.hh	/^    TCPSocket() : Socket(AF_INET, SOCK_STREAM) {}$/;"	f	class:TCPSocket
TCPSocket	libsponge/util/socket.hh	/^    explicit TCPSocket(FileDescriptor &&fd) : Socket(std::move(fd), AF_INET, SOCK_STREAM) {}$/;"	f	class:TCPSocket
TCPSocket	libsponge/util/socket.hh	/^class TCPSocket : public Socket {$/;"	c
TapFD	libsponge/util/tun.hh	/^    explicit TapFD(const std::string &devname) : TunTapFD(devname, false) {}$/;"	f	class:TapFD
TapFD	libsponge/util/tun.hh	/^class TapFD : public TunTapFD {$/;"	c
Timeout	libsponge/util/eventloop.hh	/^        Timeout,  \/\/!< No rules were triggered before timeout.$/;"	m	class:EventLoop::Direction::Result
TruncatedPacket	libsponge/util/parser.hh	/^    TruncatedPacket,  \/\/!< Packet length is shorter than header claims$/;"	m	class:ParseResult
TunFD	libsponge/util/tun.hh	/^    explicit TunFD(const std::string &devname) : TunTapFD(devname, true) {}$/;"	f	class:TunFD
TunFD	libsponge/util/tun.hh	/^class TunFD : public TunTapFD {$/;"	c
TunTapFD	libsponge/util/tun.cc	/^TunTapFD::TunTapFD(const string &devname, const bool is_tun)$/;"	f	class:TunTapFD
TunTapFD	libsponge/util/tun.hh	/^class TunTapFD : public FileDescriptor {$/;"	c
UDPSocket	libsponge/util/socket.hh	/^    UDPSocket() : Socket(AF_INET, SOCK_DGRAM) {}$/;"	f	class:UDPSocket
UDPSocket	libsponge/util/socket.hh	/^    explicit UDPSocket(FileDescriptor &&fd) : Socket(std::move(fd), AF_INET, SOCK_DGRAM) {}$/;"	f	class:UDPSocket
UDPSocket	libsponge/util/socket.hh	/^class UDPSocket : public Socket {$/;"	c
Write	tests/byte_stream_test_harness.cc	/^Write::Write(const std::string &data) : _data(data) {}$/;"	f	class:Write
Write	tests/byte_stream_test_harness.hh	/^struct Write : public ByteStreamAction {$/;"	s
WrongIPVersion	libsponge/util/parser.hh	/^    WrongIPVersion,   \/\/!< Got a version of IP other than 4$/;"	m	class:ParseResult
_attempt_and_error	libsponge/util/util.hh	/^    std::string _attempt_and_error;  \/\/!< What was attempted, and what happened$/;"	m	class:tagged_error
_buffer	libsponge/util/parser.hh	/^    Buffer _buffer;$/;"	m	class:NetParser
_buffer_empty	tests/byte_stream_test_harness.hh	/^    bool _buffer_empty;$/;"	m	struct:BufferEmpty
_buffer_size	tests/byte_stream_test_harness.hh	/^    size_t _buffer_size;$/;"	m	struct:BufferSize
_byte_stream	tests/byte_stream_test_harness.hh	/^    ByteStream _byte_stream;$/;"	m	class:ByteStreamTestHarness
_bytes_read	tests/byte_stream_test_harness.hh	/^    size_t _bytes_read;$/;"	m	struct:BytesRead
_bytes_written	tests/byte_stream_test_harness.hh	/^    size_t _bytes_written;$/;"	m	struct:BytesWritten
_check_size	libsponge/util/parser.cc	/^void NetParser::_check_size(const size_t size) {$/;"	f	class:NetParser
_closed	libsponge/util/file_descriptor.hh	/^        bool _closed = false;       \/\/!< Flag indicating whether FDWrapper::_fd has been closed$/;"	m	class:FileDescriptor::FDWrapper
_data	tests/byte_stream_test_harness.hh	/^    std::string _data;$/;"	m	struct:Write
_eof	libsponge/util/file_descriptor.hh	/^        bool _eof = false;          \/\/!< Flag indicating whether FDWrapper::_fd is at EOF$/;"	m	class:FileDescriptor::FDWrapper
_eof	tests/byte_stream_test_harness.hh	/^    bool _eof;$/;"	m	struct:Eof
_error	libsponge/util/parser.hh	/^    ParseResult _error = ParseResult::NoError;  \/\/!< Result of parsing so far$/;"	m	class:NetParser
_fd	libsponge/util/file_descriptor.hh	/^        int _fd;                    \/\/!< The file descriptor number returned by the kernel$/;"	m	class:FileDescriptor::FDWrapper
_input_ended	tests/byte_stream_test_harness.hh	/^    bool _input_ended;$/;"	m	struct:InputEnded
_internal_fd	libsponge/util/file_descriptor.hh	/^    std::shared_ptr<FDWrapper> _internal_fd;$/;"	m	class:FileDescriptor
_len	tests/byte_stream_test_harness.hh	/^    size_t _len;$/;"	m	struct:Pop
_output	tests/byte_stream_test_harness.hh	/^    std::string _output;$/;"	m	struct:Peek
_parse_int	libsponge/util/parser.cc	/^T NetParser::_parse_int() {$/;"	f	class:NetParser
_read_count	libsponge/util/file_descriptor.hh	/^        unsigned _read_count = 0;   \/\/!< The number of times FDWrapper::_fd has been read$/;"	m	class:FileDescriptor::FDWrapper
_remaining_capacity	tests/byte_stream_test_harness.hh	/^    size_t _remaining_capacity;$/;"	m	struct:RemainingCapacity
_size	libsponge/util/address.hh	/^    socklen_t _size;  \/\/!< Size of the wrapped address.$/;"	m	class:Address
_sum	libsponge/util/util.hh	/^    uint32_t _sum;$/;"	m	class:InternetChecksum
_test_err_if	tests/test_err_if.hh	/^static void _test_err_if(const bool err_condition, const std::string &err_string, const int lineno) {$/;"	f
_test_name	tests/byte_stream_test_harness.hh	/^    std::string _test_name;$/;"	m	class:ByteStreamTestHarness
_test_should_be	tests/test_should_be.hh	/^static void _test_should_be(const T &actual,$/;"	f
_unparse_int	libsponge/util/parser.cc	/^void NetUnparser::_unparse_int(string &s, T val) {$/;"	f	class:NetUnparser
_write_count	libsponge/util/file_descriptor.hh	/^        unsigned _write_count = 0;  \/\/!< The numberof times FDWrapper::_fd has been written$/;"	m	class:FileDescriptor::FDWrapper
a_dns_server_numeric	doctests/address_example_3.cc	/^const uint32_t a_dns_server_numeric = a_dns_server.ipv4_numeric();$/;"	v
accept	libsponge/util/socket.cc	/^TCPSocket TCPSocket::accept() {$/;"	f	class:TCPSocket
add	libsponge/util/util.cc	/^void InternetChecksum::add(std::string_view data) {$/;"	f	class:InternetChecksum
add_rule	libsponge/util/eventloop.cc	/^void EventLoop::add_rule(const FileDescriptor &fd,$/;"	f	class:EventLoop
append	libsponge/util/buffer.cc	/^void BufferList::append(const BufferList &other) {$/;"	f	class:BufferList
as_iovecs	libsponge/util/buffer.cc	/^vector<iovec> BufferViewList::as_iovecs() const {$/;"	f	class:BufferViewList
as_string	libsponge/util/parser.cc	/^string as_string(const ParseResult r) {$/;"	f
at	libsponge/util/buffer.hh	/^    uint8_t at(const size_t n) const { return str().at(n); }$/;"	f	class:Buffer
bind	libsponge/util/socket.cc	/^void Socket::bind(const Address &address) { SystemCall("bind", ::bind(fd_num(), address, address.size())); }$/;"	f	class:Socket
buffer	doctests/parser_example.cc	/^std::string buffer;$/;"	v
buffer	libsponge/util/parser.hh	/^    Buffer buffer() const { return _buffer; }$/;"	f	class:NetParser
buffer_empty	libsponge/byte_stream.cc	/^bool ByteStream::buffer_empty() const { return {}; }$/;"	f	class:ByteStream
buffer_size	libsponge/byte_stream.cc	/^size_t ByteStream::buffer_size() const { return {}; }$/;"	f	class:ByteStream
buffers	libsponge/util/buffer.hh	/^    const std::deque<Buffer> &buffers() const { return _buffers; }$/;"	f	class:BufferList
bytes_read	libsponge/byte_stream.cc	/^size_t ByteStream::bytes_read() const { return {}; }$/;"	f	class:ByteStream
bytes_written	libsponge/byte_stream.cc	/^size_t ByteStream::bytes_written() const { return {}; }$/;"	f	class:ByteStream
callback	libsponge/util/eventloop.hh	/^        CallbackT callback;   \/\/!< A callback that reads or writes fd.$/;"	m	class:EventLoop::Direction::Rule
cancel	libsponge/util/eventloop.hh	/^        CallbackT cancel;     \/\/!< A callback that is called when the rule is cancelled (e.g. on hangup)$/;"	m	class:EventLoop::Direction::Rule
close	libsponge/util/file_descriptor.cc	/^void FileDescriptor::FDWrapper::close() {$/;"	f	class:FileDescriptor::FDWrapper
close	libsponge/util/file_descriptor.hh	/^    void close() { _internal_fd->close(); }$/;"	f	class:FileDescriptor
closed	libsponge/util/file_descriptor.hh	/^    bool closed() const { return _internal_fd->_closed; }$/;"	f	class:FileDescriptor
concatenate	libsponge/util/buffer.cc	/^string BufferList::concatenate() const {$/;"	f	class:BufferList
connect	libsponge/util/socket.cc	/^void Socket::connect(const Address &address) { SystemCall("connect", ::connect(fd_num(), address, address.size())); }$/;"	f	class:Socket
copy	libsponge/util/buffer.hh	/^    std::string copy() const { return std::string(str()); }$/;"	f	class:Buffer
description	tests/byte_stream_test_harness.cc	/^std::string BufferEmpty::description() const { return "buffer_empty: " + to_string(_buffer_empty); }$/;"	f	class:BufferEmpty
description	tests/byte_stream_test_harness.cc	/^std::string BufferSize::description() const { return "buffer_size: " + to_string(_buffer_size); }$/;"	f	class:BufferSize
description	tests/byte_stream_test_harness.cc	/^std::string ByteStreamAction::description() const { return "description missing"; }$/;"	f	class:ByteStreamAction
description	tests/byte_stream_test_harness.cc	/^std::string ByteStreamExpectation::description() const { return "description missing"; }$/;"	f	class:ByteStreamExpectation
description	tests/byte_stream_test_harness.cc	/^std::string BytesRead::description() const { return "bytes_read: " + to_string(_bytes_read); }$/;"	f	class:BytesRead
description	tests/byte_stream_test_harness.cc	/^std::string BytesWritten::description() const { return "bytes_written: " + to_string(_bytes_written); }$/;"	f	class:BytesWritten
description	tests/byte_stream_test_harness.cc	/^std::string EndInput::description() const { return "end input"; }$/;"	f	class:EndInput
description	tests/byte_stream_test_harness.cc	/^std::string Eof::description() const { return "eof: " + to_string(_eof); }$/;"	f	class:Eof
description	tests/byte_stream_test_harness.cc	/^std::string InputEnded::description() const { return "input_ended: " + to_string(_input_ended); }$/;"	f	class:InputEnded
description	tests/byte_stream_test_harness.cc	/^std::string Peek::description() const { return "\\"" + _output + "\\" at the front of the stream"; }$/;"	f	class:Peek
description	tests/byte_stream_test_harness.cc	/^std::string Pop::description() const { return "pop " + to_string(_len); }$/;"	f	class:Pop
description	tests/byte_stream_test_harness.cc	/^std::string RemainingCapacity::description() const { return "remaining_capacity: " + to_string(_remaining_capacity); }$/;"	f	class:RemainingCapacity
description	tests/byte_stream_test_harness.cc	/^std::string Write::description() const { return "write \\"" + _data + "\\" to the stream"; }$/;"	f	class:Write
direction	libsponge/util/eventloop.hh	/^        Direction direction;  \/\/!< Direction::In for reading from fd, Direction::Out for writing to fd.$/;"	m	class:EventLoop::Direction::Rule
duplicate	libsponge/util/file_descriptor.cc	/^FileDescriptor FileDescriptor::duplicate() const { return FileDescriptor(_internal_fd); }$/;"	f	class:FileDescriptor
end_input	libsponge/byte_stream.cc	/^void ByteStream::end_input() {}$/;"	f	class:ByteStream
eof	libsponge/byte_stream.cc	/^bool ByteStream::eof() const { return false; }$/;"	f	class:ByteStream
eof	libsponge/util/file_descriptor.hh	/^    bool eof() const { return _internal_fd->_eof; }$/;"	f	class:FileDescriptor
err_num	tests/test_err_if.hh	/^static int err_num = 1;$/;"	v
error	libsponge/byte_stream.hh	/^    bool error() const { return _error; }$/;"	f	class:ByteStream
error	libsponge/util/parser.hh	/^    bool error() const { return get_error() != ParseResult::NoError; }$/;"	f	class:NetParser
execute	tests/byte_stream_test_harness.cc	/^void BufferEmpty::execute(ByteStream &bs) const {$/;"	f	class:BufferEmpty
execute	tests/byte_stream_test_harness.cc	/^void BufferSize::execute(ByteStream &bs) const {$/;"	f	class:BufferSize
execute	tests/byte_stream_test_harness.cc	/^void ByteStreamAction::execute(ByteStream &) const {}$/;"	f	class:ByteStreamAction
execute	tests/byte_stream_test_harness.cc	/^void ByteStreamExpectation::execute(ByteStream &) const {}$/;"	f	class:ByteStreamExpectation
execute	tests/byte_stream_test_harness.cc	/^void ByteStreamTestHarness::execute(const ByteStreamTestStep &step) {$/;"	f	class:ByteStreamTestHarness
execute	tests/byte_stream_test_harness.cc	/^void ByteStreamTestStep::execute(ByteStream &) const {}$/;"	f	class:ByteStreamTestStep
execute	tests/byte_stream_test_harness.cc	/^void BytesRead::execute(ByteStream &bs) const {$/;"	f	class:BytesRead
execute	tests/byte_stream_test_harness.cc	/^void BytesWritten::execute(ByteStream &bs) const {$/;"	f	class:BytesWritten
execute	tests/byte_stream_test_harness.cc	/^void EndInput::execute(ByteStream &bs) const { bs.end_input(); }$/;"	f	class:EndInput
execute	tests/byte_stream_test_harness.cc	/^void Eof::execute(ByteStream &bs) const {$/;"	f	class:Eof
execute	tests/byte_stream_test_harness.cc	/^void InputEnded::execute(ByteStream &bs) const {$/;"	f	class:InputEnded
execute	tests/byte_stream_test_harness.cc	/^void Peek::execute(ByteStream &bs) const {$/;"	f	class:Peek
execute	tests/byte_stream_test_harness.cc	/^void Pop::execute(ByteStream &bs) const { bs.pop_output(_len); }$/;"	f	class:Pop
execute	tests/byte_stream_test_harness.cc	/^void RemainingCapacity::execute(ByteStream &bs) const {$/;"	f	class:RemainingCapacity
execute	tests/byte_stream_test_harness.cc	/^void Write::execute(ByteStream &bs) const {$/;"	f	class:Write
fd	libsponge/util/eventloop.hh	/^        FileDescriptor fd;    \/\/!< FileDescriptor to monitor for activity.$/;"	m	class:EventLoop::Direction::Rule
fd_num	libsponge/util/file_descriptor.hh	/^    int fd_num() const { return _internal_fd->_fd; }$/;"	f	class:FileDescriptor
from_ipv4_numeric	libsponge/util/address.cc	/^Address Address::from_ipv4_numeric(const uint32_t ip_address) {$/;"	f	class:Address
gai_error_category	libsponge/util/address.cc	/^class gai_error_category : public error_category {$/;"	c	file:
get_URL	apps/webget.cc	/^void get_URL(const string &host, const string &path) {$/;"	f
get_address	libsponge/util/socket.cc	/^Address Socket::get_address(const string &name_of_function,$/;"	f	class:Socket
get_error	libsponge/util/parser.hh	/^    ParseResult get_error() const { return _error; }$/;"	f	class:NetParser
get_random_generator	libsponge/util/util.cc	/^mt19937 get_random_generator() {$/;"	f
hexdump	libsponge/util/util.cc	/^void hexdump(const char *data, const size_t len, const size_t indent) {$/;"	f
hexdump	libsponge/util/util.cc	/^void hexdump(const uint8_t *data, const size_t len, const size_t indent) {$/;"	f
input_ended	libsponge/byte_stream.cc	/^bool ByteStream::input_ended() const { return {}; }$/;"	f	class:ByteStream
interest	libsponge/util/eventloop.hh	/^        InterestT interest;   \/\/!< A callback that returns `true` whenever fd should be polled.$/;"	m	class:EventLoop::Direction::Rule
ip	libsponge/util/address.hh	/^    std::string ip() const { return ip_port().first; }$/;"	f	class:Address
ip_port	libsponge/util/address.cc	/^pair<string, uint16_t> Address::ip_port() const {$/;"	f	class:Address
ipv4_numeric	libsponge/util/address.cc	/^uint32_t Address::ipv4_numeric() const {$/;"	f	class:Address
listen	libsponge/util/socket.cc	/^void TCPSocket::listen(const int backlog) { SystemCall("listen", ::listen(fd_num(), backlog)); }$/;"	f	class:TCPSocket
local_address	libsponge/util/socket.cc	/^Address Socket::local_address() const { return get_address("getsockname", getsockname); }$/;"	f	class:Socket
main	apps/webget.cc	/^int main(int argc, char *argv[]) {$/;"	f
main	doctests/address_dt.cc	/^int main() {$/;"	f
main	doctests/parser_dt.cc	/^int main() {$/;"	f
main	doctests/socket_dt.cc	/^int main() {$/;"	f
main	tests/byte_stream_capacity.cc	/^int main() {$/;"	f
main	tests/byte_stream_construction.cc	/^int main() {$/;"	f
main	tests/byte_stream_many_writes.cc	/^int main() {$/;"	f
main	tests/byte_stream_one_write.cc	/^int main() {$/;"	f
main	tests/byte_stream_two_writes.cc	/^int main() {$/;"	f
make_hints	libsponge/util/address.cc	/^static inline addrinfo make_hints(const int ai_flags, const int ai_family) {$/;"	f	file:
make_shared	libsponge/util/buffer.hh	/^    Buffer(std::string &&str) noexcept : _storage(std::make_shared<std::string>(std::move(str))) {}$/;"	f	class:Buffer
operator !=	libsponge/util/address.hh	/^    bool operator!=(const Address &other) const { return not operator==(other); }$/;"	f	class:Address
operator ==	libsponge/util/address.cc	/^bool Address::operator==(const Address &other) const {$/;"	f	class:Address
operator Buffer	libsponge/util/buffer.cc	/^BufferList::operator Buffer() const {$/;"	f	class:BufferList
operator const sockaddr *	libsponge/util/address.cc	/^Address::Raw::operator const sockaddr *() const { return reinterpret_cast<const sockaddr *>(&storage); }$/;"	f	class:Address::Raw
operator const sockaddr *	libsponge/util/address.hh	/^    operator const sockaddr *() const { return _address; }$/;"	f	class:Address
operator sockaddr *	libsponge/util/address.cc	/^Address::Raw::operator sockaddr *() { return reinterpret_cast<sockaddr *>(&storage); }$/;"	f	class:Address::Raw
operator std::string	tests/byte_stream_test_harness.cc	/^ByteStreamAction::operator std::string() const { return "     Action: " + description(); }$/;"	f	class:ByteStreamAction
operator std::string	tests/byte_stream_test_harness.cc	/^ByteStreamExpectation::operator std::string() const { return "Expectation: " + description(); }$/;"	f	class:ByteStreamExpectation
operator std::string	tests/byte_stream_test_harness.cc	/^ByteStreamTestStep::operator std::string() const { return "ByteStreamTestStep"; }$/;"	f	class:ByteStreamTestStep
operator std::string_view	libsponge/util/buffer.hh	/^    operator std::string_view() const { return str(); }$/;"	f	class:Buffer
other	libsponge/util/file_descriptor.hh	/^        FDWrapper &operator=(FDWrapper &&other) = delete;$/;"	m	class:FileDescriptor::FDWrapper
other	libsponge/util/file_descriptor.hh	/^        FDWrapper &operator=(const FDWrapper &other) = delete;$/;"	m	class:FileDescriptor::FDWrapper
other	libsponge/util/file_descriptor.hh	/^        FDWrapper(FDWrapper &&other) = delete;$/;"	m	class:FileDescriptor::FDWrapper
other	libsponge/util/file_descriptor.hh	/^        FDWrapper(const FDWrapper &other) = delete;$/;"	m	class:FileDescriptor::FDWrapper
other	libsponge/util/file_descriptor.hh	/^    FileDescriptor &operator=(FileDescriptor &&other) = default;      \/\/!< \\brief move assignment is allowed$/;"	m	class:FileDescriptor
other	libsponge/util/file_descriptor.hh	/^    FileDescriptor &operator=(const FileDescriptor &other) = delete;  \/\/!< \\brief copy assignment is forbidden$/;"	m	class:FileDescriptor
other	libsponge/util/file_descriptor.hh	/^    FileDescriptor(FileDescriptor &&other) = default;                 \/\/!< \\brief move construction is allowed$/;"	m	class:FileDescriptor
other	libsponge/util/file_descriptor.hh	/^    FileDescriptor(const FileDescriptor &other) = delete;             \/\/!< \\brief copy construction is forbidden$/;"	m	class:FileDescriptor
out0	doctests/parser_example.cc	/^uint8_t out0, out3;$/;"	v
out1	doctests/parser_example.cc	/^uint32_t out1, out4;$/;"	v
out2	doctests/parser_example.cc	/^uint16_t out2;$/;"	v
out3	doctests/parser_example.cc	/^uint8_t out0, out3;$/;"	v
out4	doctests/parser_example.cc	/^uint32_t out1, out4;$/;"	v
override	tests/byte_stream_test_harness.hh	/^    operator std::string() const override;$/;"	m	struct:ByteStreamAction
override	tests/byte_stream_test_harness.hh	/^    operator std::string() const override;$/;"	m	struct:ByteStreamExpectation
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:BufferEmpty
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:BufferSize
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:BytesRead
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:BytesWritten
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:EndInput
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:Eof
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:InputEnded
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:Peek
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:Pop
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:RemainingCapacity
override	tests/byte_stream_test_harness.hh	/^    std::string description() const override;$/;"	m	struct:Write
override	tests/byte_stream_test_harness.hh	/^    virtual void execute(ByteStream &) const override;$/;"	m	struct:ByteStreamAction
override	tests/byte_stream_test_harness.hh	/^    virtual void execute(ByteStream &) const override;$/;"	m	struct:ByteStreamExpectation
override	tests/byte_stream_test_harness.hh	/^    virtual ~ByteStreamAction() override;$/;"	m	struct:ByteStreamAction
override	tests/byte_stream_test_harness.hh	/^    virtual ~ByteStreamExpectation() override;$/;"	m	struct:ByteStreamExpectation
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:BufferEmpty
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:BufferSize
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:BytesRead
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:BytesWritten
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:EndInput
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:Eof
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:InputEnded
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:Peek
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:Pop
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:RemainingCapacity
override	tests/byte_stream_test_harness.hh	/^    void execute(ByteStream &) const override;$/;"	m	struct:Write
payload	libsponge/util/socket.hh	/^        std::string payload;     \/\/!< UDP datagram payload$/;"	m	struct:UDPSocket::received_datagram
peek_output	libsponge/byte_stream.cc	/^string ByteStream::peek_output(const size_t len) const {$/;"	f	class:ByteStream
peer_address	libsponge/util/socket.cc	/^Address Socket::peer_address() const { return get_address("getpeername", getpeername); }$/;"	f	class:Socket
pop_output	libsponge/byte_stream.cc	/^void ByteStream::pop_output(const size_t len) { DUMMY_CODE(len); }$/;"	f	class:ByteStream
port	libsponge/util/address.hh	/^    uint16_t port() const { return ip_port().second; }$/;"	f	class:Address
portnum	doctests/socket_example_1.cc	/^const uint16_t portnum = ((std::random_device()()) % 50000) + 1025;$/;"	v
portnum	doctests/socket_example_2.cc	/^const uint16_t portnum = ((std::random_device()()) % 50000) + 1025;$/;"	v
property	tests/byte_stream_test_harness.cc	/^ByteStreamExpectationViolation ByteStreamExpectationViolation::property(const std::string &property_name,$/;"	f	class:ByteStreamExpectationViolation
read	libsponge/byte_stream.cc	/^std::string ByteStream::read(const size_t len) {$/;"	f	class:ByteStream
read	libsponge/util/file_descriptor.cc	/^string FileDescriptor::read(const size_t limit) {$/;"	f	class:FileDescriptor
read	libsponge/util/file_descriptor.cc	/^void FileDescriptor::read(std::string &str, const size_t limit) {$/;"	f	class:FileDescriptor
read_count	libsponge/util/file_descriptor.hh	/^    unsigned int read_count() const { return _internal_fd->_read_count; }$/;"	f	class:FileDescriptor
received_datagram	libsponge/util/socket.hh	/^    struct received_datagram {$/;"	s	class:UDPSocket
recv	libsponge/util/socket.cc	/^UDPSocket::received_datagram UDPSocket::recv(const size_t mtu) {$/;"	f	class:UDPSocket
recv	libsponge/util/socket.cc	/^void UDPSocket::recv(received_datagram &datagram, const size_t mtu) {$/;"	f	class:UDPSocket
recvd	doctests/socket_example_1.cc	/^auto recvd = sock1.recv();$/;"	v
recvd	doctests/socket_example_2.cc	/^auto recvd = sock2.read();$/;"	v
recvd	doctests/socket_example_3.cc	/^auto recvd = pipe2.read();$/;"	v
recvd2	doctests/socket_example_1.cc	/^auto recvd2 = sock2.recv();$/;"	v
recvd2	doctests/socket_example_2.cc	/^auto recvd2 = sock3.read();$/;"	v
recvd2	doctests/socket_example_3.cc	/^auto recvd2 = pipe1.read();$/;"	v
register_read	libsponge/util/file_descriptor.hh	/^    void register_read() { ++_internal_fd->_read_count; }    \/\/!< increment read count$/;"	f	class:FileDescriptor
register_write	libsponge/util/file_descriptor.hh	/^    void register_write() { ++_internal_fd->_write_count; }  \/\/!< increment write count$/;"	f	class:FileDescriptor
remaining_capacity	libsponge/byte_stream.cc	/^size_t ByteStream::remaining_capacity() const { return {}; }$/;"	f	class:ByteStream
remove_prefix	libsponge/util/buffer.cc	/^void Buffer::remove_prefix(const size_t n) {$/;"	f	class:Buffer
remove_prefix	libsponge/util/buffer.cc	/^void BufferList::remove_prefix(size_t n) {$/;"	f	class:BufferList
remove_prefix	libsponge/util/buffer.cc	/^void BufferViewList::remove_prefix(size_t n) {$/;"	f	class:BufferViewList
remove_prefix	libsponge/util/parser.cc	/^void NetParser::remove_prefix(const size_t n) {$/;"	f	class:NetParser
send	libsponge/util/socket.cc	/^void UDPSocket::send(const BufferViewList &payload) {$/;"	f	class:UDPSocket
sendmsg_helper	libsponge/util/socket.cc	/^void sendmsg_helper(const int fd_num,$/;"	f
sendto	libsponge/util/socket.cc	/^void UDPSocket::sendto(const Address &destination, const BufferViewList &payload) {$/;"	f	class:UDPSocket
service_count	libsponge/util/eventloop.cc	/^unsigned int EventLoop::Rule::service_count() const {$/;"	f	class:EventLoop::Rule
set_blocking	libsponge/util/file_descriptor.cc	/^void FileDescriptor::set_blocking(const bool blocking_state) {$/;"	f	class:FileDescriptor
set_error	libsponge/byte_stream.hh	/^    void set_error() { _error = true; }$/;"	f	class:ByteStream
set_error	libsponge/util/parser.hh	/^    void set_error(ParseResult res) { _error = res; }$/;"	f	class:NetParser
set_reuseaddr	libsponge/util/socket.cc	/^void Socket::set_reuseaddr() { setsockopt(SOL_SOCKET, SO_REUSEADDR, int(true)); }$/;"	f	class:Socket
setsockopt	libsponge/util/socket.cc	/^void Socket::setsockopt(const int level, const int option, const option_type &option_value) {$/;"	f	class:Socket
shutdown	libsponge/util/socket.cc	/^void Socket::shutdown(const int how) {$/;"	f	class:Socket
size	libsponge/util/address.hh	/^    socklen_t size() const { return _size; }$/;"	f	class:Address
size	libsponge/util/buffer.cc	/^size_t BufferList::size() const {$/;"	f	class:BufferList
size	libsponge/util/buffer.cc	/^size_t BufferViewList::size() const {$/;"	f	class:BufferViewList
size	libsponge/util/buffer.hh	/^    size_t size() const { return str().size(); }$/;"	f	class:Buffer
sock1	doctests/socket_example_1.cc	/^UDPSocket sock1;$/;"	v
sock1	doctests/socket_example_2.cc	/^TCPSocket sock1;$/;"	v
sock2	doctests/socket_example_1.cc	/^UDPSocket sock2;$/;"	v
sock2	doctests/socket_example_2.cc	/^TCPSocket sock2;$/;"	v
sock3	doctests/socket_example_2.cc	/^auto sock3 = sock1.accept();$/;"	v
source_address	libsponge/util/socket.hh	/^        Address source_address;  \/\/!< Address from which this datagram was received$/;"	m	struct:UDPSocket::received_datagram
str	libsponge/util/buffer.hh	/^    std::string_view str() const {$/;"	f	class:Buffer
tagged_error	libsponge/util/util.hh	/^    tagged_error(const std::error_category &category, const std::string &attempt, const int error_code)$/;"	f	class:tagged_error
tagged_error	libsponge/util/util.hh	/^class tagged_error : public std::system_error {$/;"	c
test_err_if	tests/test_err_if.hh	/^#define test_err_if(/;"	d
test_should_be	tests/test_should_be.hh	/^#define test_should_be(/;"	d
timestamp_ms	libsponge/util/util.cc	/^uint64_t timestamp_ms() {$/;"	f
to_string	libsponge/util/address.cc	/^string Address::to_string() const {$/;"	f	class:Address
u16	libsponge/util/parser.cc	/^uint16_t NetParser::u16() { return _parse_int<uint16_t>(); }$/;"	f	class:NetParser
u16	libsponge/util/parser.cc	/^void NetUnparser::u16(string &s, const uint16_t val) { return _unparse_int<uint16_t>(s, val); }$/;"	f	class:NetUnparser
u32	libsponge/util/parser.cc	/^uint32_t NetParser::u32() { return _parse_int<uint32_t>(); }$/;"	f	class:NetParser
u32	libsponge/util/parser.cc	/^void NetUnparser::u32(string &s, const uint32_t val) { return _unparse_int<uint32_t>(s, val); }$/;"	f	class:NetUnparser
u8	libsponge/util/parser.cc	/^uint8_t NetParser::u8() { return _parse_int<uint8_t>(); }$/;"	f	class:NetParser
u8	libsponge/util/parser.cc	/^void NetUnparser::u8(string &s, const uint8_t val) { return _unparse_int<uint8_t>(s, val); }$/;"	f	class:NetUnparser
unix_error	libsponge/util/util.hh	/^    explicit unix_error(const std::string &attempt, const int error = errno)$/;"	f	class:unix_error
unix_error	libsponge/util/util.hh	/^class unix_error : public tagged_error {$/;"	c
val1	doctests/parser_example.cc	/^const uint32_t val1 = 0xdeadbeef;$/;"	v
val2	doctests/parser_example.cc	/^const uint16_t val2 = 0xc0c0;$/;"	v
val3	doctests/parser_example.cc	/^const uint8_t val3 = 0xff;$/;"	v
val4	doctests/parser_example.cc	/^const uint32_t val4 = 0x0c05fefe;$/;"	v
value	libsponge/util/util.cc	/^uint16_t InternetChecksum::value() const {$/;"	f	class:InternetChecksum
wait_next_event	libsponge/util/eventloop.cc	/^EventLoop::Result EventLoop::wait_next_event(const int timeout_ms) {$/;"	f	class:EventLoop
with_bytes_written	tests/byte_stream_test_harness.cc	/^Write &Write::with_bytes_written(const size_t bytes_written) {$/;"	f	class:Write
write	libsponge/byte_stream.cc	/^size_t ByteStream::write(const string &data) {$/;"	f	class:ByteStream
write	libsponge/util/file_descriptor.cc	/^size_t FileDescriptor::write(BufferViewList buffer, const bool write_all) {$/;"	f	class:FileDescriptor
write	libsponge/util/file_descriptor.hh	/^    size_t write(const char *str, const bool write_all = true) { return write(BufferViewList(str), write_all); }$/;"	f	class:FileDescriptor
write	libsponge/util/file_descriptor.hh	/^    size_t write(const std::string &str, const bool write_all = true) { return write(BufferViewList(str), write_all); }$/;"	f	class:FileDescriptor
write_count	libsponge/util/file_descriptor.hh	/^    unsigned int write_count() const { return _internal_fd->_write_count; }$/;"	f	class:FileDescriptor
~ByteStreamAction	tests/byte_stream_test_harness.cc	/^ByteStreamAction::~ByteStreamAction() {}$/;"	f	class:ByteStreamAction
~ByteStreamExpectation	tests/byte_stream_test_harness.cc	/^ByteStreamExpectation::~ByteStreamExpectation() {}$/;"	f	class:ByteStreamExpectation
~ByteStreamTestStep	tests/byte_stream_test_harness.cc	/^ByteStreamTestStep::~ByteStreamTestStep() {}$/;"	f	class:ByteStreamTestStep
~FDWrapper	libsponge/util/file_descriptor.cc	/^FileDescriptor::FDWrapper::~FDWrapper() {$/;"	f	class:FileDescriptor::FDWrapper
